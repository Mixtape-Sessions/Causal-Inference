
. 
. * load the data from github
. use https://github.com/scunning1975/causal-inference-class/raw/master/hansen_dwi, clear

. 
. * Q1: create some variables
. gen     dui = 0

. replace dui = 1 if bac1>=0.08 & bac1~=. // you got to put the ampersand bac1 not missing because
(191,548 real changes made)

. * Stata thinks that if a missing value (.) exists for a variable (bac1) that it actually is LARGER
. * than whatever threshold you specified (0.08). 
. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. reg white dui##c.bac1 if bac1>=0.03 & bac1<=0.13, robust //not going to cluster on the running

Linear regression                               Number of obs     =     89,967
                                                F(3, 89963)       =       3.80
                                                Prob > F          =     0.0098
                                                R-squared         =     0.0001
                                                Root MSE          =     .35452

------------------------------------------------------------------------------
             |               Robust
       white | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
       1.dui |   .0044543   .0175152     0.25   0.799    -.0298754     .038784
        bac1 |   .0787543   .2142164     0.37   0.713    -.3411077    .4986163
             |
  dui#c.bac1 |
          1  |   .0156179   .2339552     0.07   0.947    -.4429319    .4741678
             |
       _cons |    .839975   .0142524    58.94   0.000     .8120404    .8679095
------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. cmogram white bac1 if bac1>=0.03 & bac1<0.13, cut(0.08) scatter line(0.08) lfit

Plotting mean of white, conditional on bac1.

n = 89967

Bin #1: [.0309999994933605,.0321666661295153] (n = 190) (mean = .7947368421052632)
Bin #2: (.0321666661295153,.0333333327656701] (n = 114) (mean = .8245614035087719)
Bin #3: (.0333333327656701,.0344999994018249] (n = 96) (mean = .9375)
Bin #4: (.0344999994018249,.0356666660379797] (n = 116) (mean = .8275862068965517)
Bin #5: (.0356666660379797,.0368333326741345] (n = 106) (mean = .8018867924528302)
Bin #6: (.0368333326741345,.0379999993102893] (n = 218) (mean = .8532110091743119)
Bin #7: (.0379999993102893,.0391666659464441] (n = 116) (mean = .8017241379310345)
Bin #8: (.0391666659464441,.0403333325825989] (n = 111) (mean = .8828828828828829)
Bin #9: (.0403333325825989,.0414999992187537] (n = 135) (mean = .8518518518518519)
Bin #10: (.0414999992187537,.0426666658549085] (n = 145) (mean = .8413793103448276)
Bin #11: (.0426666658549085,.0438333324910633] (n = 152) (mean = .8355263157894737)
Bin #12: (.0438333324910633,.0449999991272181] (n = 145) (mean = .8758620689655172)
Bin #13: (.0449999991272181,.0461666657633729] (n = 309) (mean = .8640776699029126)
Bin #14: (.0461666657633729,.0473333323995277] (n = 165) (mean = .8909090909090909)
Bin #15: (.0473333323995277,.0484999990356825] (n = 200) (mean = .85)
Bin #16: (.0484999990356825,.0496666656718373] (n = 175) (mean = .84)
Bin #17: (.0496666656718373,.0508333323079921] (n = 204) (mean = .8382352941176471)
Bin #18: (.0508333323079921,.0519999989441469] (n = 218) (mean = .8165137614678899)
Bin #19: (.0519999989441469,.0531666655803017] (n = 456) (mean = .8442982456140351)
Bin #20: (.0531666655803017,.0543333322164565] (n = 255) (mean = .8352941176470589)
Bin #21: (.0543333322164565,.0554999988526113] (n = 248) (mean = .8790322580645161)
Bin #22: (.0554999988526113,.0566666654887661] (n = 291) (mean = .8247422680412371)
Bin #23: (.0566666654887661,.0578333321249209] (n = 285) (mean = .8701754385964913)
Bin #24: (.0578333321249209,.0589999987610757] (n = 310) (mean = .8612903225806452)
Bin #25: (.0589999987610757,.0601666653972305] (n = 724) (mean = .8480662983425414)
Bin #26: (.0601666653972305,.0613333320333853] (n = 400) (mean = .835)
Bin #27: (.0613333320333853,.0624999986695401] (n = 415) (mean = .8289156626506025)
Bin #28: (.0624999986695401,.0636666653056949] (n = 493) (mean = .8235294117647058)
Bin #29: (.0636666653056949,.0648333319418497] (n = 472) (mean = .8516949152542372)
Bin #30: (.0648333319418497,.0659999985780045] (n = 463) (mean = .8704103671706264)
Bin #31: (.0659999985780045,.0671666652141593] (n = 1046) (mean = .8269598470363289)
Bin #32: (.0671666652141593,.0683333318503141] (n = 586) (mean = .8378839590443686)
Bin #33: (.0683333318503141,.0694999984864689] (n = 638) (mean = .8573667711598746)
Bin #34: (.0694999984864689,.0706666651226237] (n = 638) (mean = .8526645768025078)
Bin #35: (.0706666651226237,.0718333317587785] (n = 689) (mean = .8316400580551524)
Bin #36: (.0718333317587785,.0729999983949333] (n = 732) (mean = .8401639344262295)
Bin #37: (.0729999983949333,.0741666650310881] (n = 1534) (mean = .834419817470665)
Bin #38: (.0741666650310881,.0753333316672429] (n = 839) (mean = .8581644815256257)
Bin #39: (.0753333316672429,.0764999983033977] (n = 822) (mean = .8564476885644768)
Bin #40: (.0764999983033977,.0776666649395525] (n = 855) (mean = .8315789473684211)
Bin #41: (.0776666649395525,.0788333315757073] (n = 904) (mean = .8550884955752213)
Bin #42: (.0788333315757073,.0799999982118607] (n = 1882) (mean = .8528161530286928)
Bin #1: [.08,.0810416665673256] (n = 979) (mean = .8723186925434117)
Bin #2: (.0810416665673256,.0820833331346512] (n = 1099) (mean = .8525932666060054)
Bin #3: (.0820833331346512,.0831249997019768] (n = 1110) (mean = .8522522522522522)
Bin #4: (.0831249997019768,.0841666662693024] (n = 1024) (mean = .8544921875)
Bin #5: (.0841666662693024,.085208332836628] (n = 1053) (mean = .8603988603988604)
Bin #6: (.085208332836628,.0862499994039536] (n = 1084) (mean = .8422509225092251)
Bin #7: (.0862499994039536,.0872916659712792] (n = 1167) (mean = .8517566409597258)
Bin #8: (.0872916659712792,.0883333325386048] (n = 1216) (mean = .8569078947368421)
Bin #9: (.0883333325386048,.0893749991059304] (n = 1270) (mean = .8448818897637795)
Bin #10: (.0893749991059304,.090416665673256] (n = 1257) (mean = .8520286396181385)
Bin #11: (.090416665673256,.0914583322405816] (n = 1206) (mean = .8548922056384743)
Bin #12: (.0914583322405816,.0924999988079072] (n = 1265) (mean = .8600790513833992)
Bin #13: (.0924999988079072,.0935416653752328] (n = 1325) (mean = .8384905660377359)
Bin #14: (.0935416653752328,.0945833319425584] (n = 1297) (mean = .843484965304549)
Bin #15: (.0945833319425584,.095624998509884] (n = 1324) (mean = .8527190332326284)
Bin #16: (.095624998509884,.0966666650772096] (n = 1327) (mean = .8575734740015072)
Bin #17: (.0966666650772096,.0977083316445352] (n = 1325) (mean = .8520754716981133)
Bin #18: (.0977083316445352,.0987499982118608] (n = 1400) (mean = .8407142857142857)
Bin #19: (.0987499982118608,.0997916647791864] (n = 1439) (mean = .8665740097289785)
Bin #20: (.0997916647791864,.100833331346512] (n = 1388) (mean = .8551873198847262)
Bin #21: (.100833331346512,.1018749979138376] (n = 1466) (mean = .8472032742155525)
Bin #22: (.1018749979138376,.1029166644811632] (n = 1446) (mean = .8450899031811895)
Bin #23: (.1029166644811632,.1039583310484888] (n = 1479) (mean = .8586883029073699)
Bin #24: (.1039583310484888,.1049999976158144] (n = 2993) (mean = .8569996658870699)
Bin #25: (.1049999976158144,.10604166418314] (n = 1532) (mean = .8518276762402088)
Bin #26: (.10604166418314,.1070833307504656] (n = 1447) (mean = .8507256392536282)
Bin #27: (.1070833307504656,.1081249973177912] (n = 1506) (mean = .8446215139442231)
Bin #28: (.1081249973177912,.1091666638851168] (n = 1515) (mean = .8587458745874588)
Bin #29: (.1091666638851168,.1102083304524424] (n = 1510) (mean = .8582781456953642)
Bin #30: (.1102083304524424,.111249997019768] (n = 1564) (mean = .8465473145780051)
Bin #31: (.111249997019768,.1122916635870936] (n = 1564) (mean = .868925831202046)
Bin #32: (.1122916635870936,.1133333301544192] (n = 1575) (mean = .8679365079365079)
Bin #33: (.1133333301544192,.1143749967217448] (n = 1501) (mean = .8640906062624917)
Bin #34: (.1143749967217448,.1154166632890704] (n = 1620) (mean = .85)
Bin #35: (.1154166632890704,.116458329856396] (n = 1578) (mean = .844106463878327)
Bin #36: (.116458329856396,.1174999964237216] (n = 1519) (mean = .8531928900592495)
Bin #37: (.1174999964237216,.1185416629910472] (n = 1550) (mean = .8658064516129033)
Bin #38: (.1185416629910472,.1195833295583728] (n = 1571) (mean = .8516868236791852)
Bin #39: (.1195833295583728,.1206249961256984] (n = 1564) (mean = .84846547314578)
Bin #40: (.1206249961256984,.121666662693024] (n = 1666) (mean = .8625450180072028)
Bin #41: (.121666662693024,.1227083292603496] (n = 1584) (mean = .8686868686868687)
Bin #42: (.1227083292603496,.1237499958276752] (n = 1603) (mean = .8484092326887087)
Bin #43: (.1237499958276752,.1247916623950008] (n = 1622) (mean = .8674475955610358)
Bin #44: (.1247916623950008,.1258333289623264] (n = 1589) (mean = .8514789175582127)
Bin #45: (.1258333289623264,.126874995529652] (n = 1570) (mean = .8643312101910828)
Bin #46: (.126874995529652,.1279166620969776] (n = 1601) (mean = .8507183010618363)
Bin #47: (.1279166620969776,.1289583286643032] (n = 1609) (mean = .8458669981354879)
Bin #48: (.1289583286643032,.1299999952316284] (n = 1582) (mean = .861567635903919)

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. reg male dui##c.bac1 if bac1>=0.03 & bac1<=0.13, robust //not going to cluster on the running

Linear regression                               Number of obs     =     89,967
                                                F(3, 89963)       =       1.50
                                                Prob > F          =     0.2120
                                                R-squared         =     0.0001
                                                Root MSE          =     .40598

------------------------------------------------------------------------------
             |               Robust
        male | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
       1.dui |  -.0183815   .0197867    -0.93   0.353    -.0571633    .0204003
        bac1 |    -.20997   .2397792    -0.88   0.381    -.6799349    .2599949
             |
  dui#c.bac1 |
          1  |   .3070719   .2632392     1.17   0.243    -.2088743    .8230182
             |
       _cons |   .8010338   .0159175    50.32   0.000     .7698355     .832232
------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. reg acc dui##c.bac1 if bac1>=0.03 & bac1<=0.13, robust //not going to cluster on the running

Linear regression                               Number of obs     =     89,967
                                                F(3, 89963)       =      44.02
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0015
                                                Root MSE          =     .30138

------------------------------------------------------------------------------
             |               Robust
         acc | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
       1.dui |  -.1544195   .0152688   -10.11   0.000    -.1843463   -.1244927
        bac1 |  -1.095895   .1863283    -5.88   0.000    -1.461097   -.7306936
             |
  dui#c.bac1 |
          1  |   1.888365   .2030573     9.30   0.000     1.490374    2.286355
             |
       _cons |   .1711028   .0126042    13.58   0.000     .1463988    .1958069
------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. cmogram acc bac1 if bac1>=0.03 & bac1<0.13, cut(0.08) scatter line(0.08) lfit

Plotting mean of acc, conditional on bac1.

n = 89967

Bin #1: [.0309999994933605,.0321666661295153] (n = 190) (mean = .1736842105263158)
Bin #2: (.0321666661295153,.0333333327656701] (n = 114) (mean = .1140350877192982)
Bin #3: (.0333333327656701,.0344999994018249] (n = 96) (mean = .125)
Bin #4: (.0344999994018249,.0356666660379797] (n = 116) (mean = .0948275862068965)
Bin #5: (.0356666660379797,.0368333326741345] (n = 106) (mean = .1037735849056604)
Bin #6: (.0368333326741345,.0379999993102893] (n = 218) (mean = .1055045871559633)
Bin #7: (.0379999993102893,.0391666659464441] (n = 116) (mean = .1293103448275862)
Bin #8: (.0391666659464441,.0403333325825989] (n = 111) (mean = .1261261261261261)
Bin #9: (.0403333325825989,.0414999992187537] (n = 135) (mean = .0888888888888889)
Bin #10: (.0414999992187537,.0426666658549085] (n = 145) (mean = .096551724137931)
Bin #11: (.0426666658549085,.0438333324910633] (n = 152) (mean = .131578947368421)
Bin #12: (.0438333324910633,.0449999991272181] (n = 145) (mean = .1379310344827586)
Bin #13: (.0449999991272181,.0461666657633729] (n = 309) (mean = .1359223300970874)
Bin #14: (.0461666657633729,.0473333323995277] (n = 165) (mean = .1454545454545454)
Bin #15: (.0473333323995277,.0484999990356825] (n = 200) (mean = .145)
Bin #16: (.0484999990356825,.0496666656718373] (n = 175) (mean = .16)
Bin #17: (.0496666656718373,.0508333323079921] (n = 204) (mean = .1225490196078431)
Bin #18: (.0508333323079921,.0519999989441469] (n = 218) (mean = .1146788990825688)
Bin #19: (.0519999989441469,.0531666655803017] (n = 456) (mean = .1118421052631579)
Bin #20: (.0531666655803017,.0543333322164565] (n = 255) (mean = .1411764705882353)
Bin #21: (.0543333322164565,.0554999988526113] (n = 248) (mean = .1008064516129032)
Bin #22: (.0554999988526113,.0566666654887661] (n = 291) (mean = .0962199312714777)
Bin #23: (.0566666654887661,.0578333321249209] (n = 285) (mean = .1298245614035088)
Bin #24: (.0578333321249209,.0589999987610757] (n = 310) (mean = .1096774193548387)
Bin #25: (.0589999987610757,.0601666653972305] (n = 724) (mean = .1077348066298343)
Bin #26: (.0601666653972305,.0613333320333853] (n = 400) (mean = .1)
Bin #27: (.0613333320333853,.0624999986695401] (n = 415) (mean = .0843373493975904)
Bin #28: (.0624999986695401,.0636666653056949] (n = 493) (mean = .1156186612576065)
Bin #29: (.0636666653056949,.0648333319418497] (n = 472) (mean = .086864406779661)
Bin #30: (.0648333319418497,.0659999985780045] (n = 463) (mean = .0842332613390929)
Bin #31: (.0659999985780045,.0671666652141593] (n = 1046) (mean = .1013384321223709)
Bin #32: (.0671666652141593,.0683333318503141] (n = 586) (mean = .1023890784982935)
Bin #33: (.0683333318503141,.0694999984864689] (n = 638) (mean = .0877742946708464)
Bin #34: (.0694999984864689,.0706666651226237] (n = 638) (mean = .0830721003134796)
Bin #35: (.0706666651226237,.0718333317587785] (n = 689) (mean = .0972423802612482)
Bin #36: (.0718333317587785,.0729999983949333] (n = 732) (mean = .092896174863388)
Bin #37: (.0729999983949333,.0741666650310881] (n = 1534) (mean = .0808344198174707)
Bin #38: (.0741666650310881,.0753333316672429] (n = 839) (mean = .0965435041716329)
Bin #39: (.0753333316672429,.0764999983033977] (n = 822) (mean = .0742092457420925)
Bin #40: (.0764999983033977,.0776666649395525] (n = 855) (mean = .0970760233918129)
Bin #41: (.0776666649395525,.0788333315757073] (n = 904) (mean = .0907079646017699)
Bin #42: (.0788333315757073,.0799999982118607] (n = 1882) (mean = .0887353878852285)
Bin #1: [.08,.0810416665673256] (n = 979) (mean = .0878447395301328)
Bin #2: (.0810416665673256,.0820833331346512] (n = 1099) (mean = .086442220200182)
Bin #3: (.0820833331346512,.0831249997019768] (n = 1110) (mean = .1)
Bin #4: (.0831249997019768,.0841666662693024] (n = 1024) (mean = .076171875)
Bin #5: (.0841666662693024,.085208332836628] (n = 1053) (mean = .0892687559354226)
Bin #6: (.085208332836628,.0862499994039536] (n = 1084) (mean = .0857933579335793)
Bin #7: (.0862499994039536,.0872916659712792] (n = 1167) (mean = .0865467009425878)
Bin #8: (.0872916659712792,.0883333325386048] (n = 1216) (mean = .078125)
Bin #9: (.0883333325386048,.0893749991059304] (n = 1270) (mean = .0818897637795276)
Bin #10: (.0893749991059304,.090416665673256] (n = 1257) (mean = .0922832140015911)
Bin #11: (.090416665673256,.0914583322405816] (n = 1206) (mean = .0970149253731343)
Bin #12: (.0914583322405816,.0924999988079072] (n = 1265) (mean = .0948616600790514)
Bin #13: (.0924999988079072,.0935416653752328] (n = 1325) (mean = .1011320754716981)
Bin #14: (.0935416653752328,.0945833319425584] (n = 1297) (mean = .0894371626831149)
Bin #15: (.0945833319425584,.095624998509884] (n = 1324) (mean = .0740181268882175)
Bin #16: (.095624998509884,.0966666650772096] (n = 1327) (mean = .0957045968349661)
Bin #17: (.0966666650772096,.0977083316445352] (n = 1325) (mean = .089811320754717)
Bin #18: (.0977083316445352,.0987499982118608] (n = 1400) (mean = .0907142857142857)
Bin #19: (.0987499982118608,.0997916647791864] (n = 1439) (mean = .088950660180681)
Bin #20: (.0997916647791864,.100833331346512] (n = 1388) (mean = .0951008645533141)
Bin #21: (.100833331346512,.1018749979138376] (n = 1466) (mean = .0832196452933151)
Bin #22: (.1018749979138376,.1029166644811632] (n = 1446) (mean = .1023513139695712)
Bin #23: (.1029166644811632,.1039583310484888] (n = 1479) (mean = .0899256254225828)
Bin #24: (.1039583310484888,.1049999976158144] (n = 2993) (mean = .0995656531907785)
Bin #25: (.1049999976158144,.10604166418314] (n = 1532) (mean = .0985639686684073)
Bin #26: (.10604166418314,.1070833307504656] (n = 1447) (mean = .0953697304768487)
Bin #27: (.1070833307504656,.1081249973177912] (n = 1506) (mean = .1155378486055777)
Bin #28: (.1081249973177912,.1091666638851168] (n = 1515) (mean = .1062706270627063)
Bin #29: (.1091666638851168,.1102083304524424] (n = 1510) (mean = .1006622516556291)
Bin #30: (.1102083304524424,.111249997019768] (n = 1564) (mean = .0978260869565217)
Bin #31: (.111249997019768,.1122916635870936] (n = 1564) (mean = .1157289002557545)
Bin #32: (.1122916635870936,.1133333301544192] (n = 1575) (mean = .1015873015873016)
Bin #33: (.1133333301544192,.1143749967217448] (n = 1501) (mean = .1112591605596269)
Bin #34: (.1143749967217448,.1154166632890704] (n = 1620) (mean = .1123456790123457)
Bin #35: (.1154166632890704,.116458329856396] (n = 1578) (mean = .0994930291508238)
Bin #36: (.116458329856396,.1174999964237216] (n = 1519) (mean = .0954575378538512)
Bin #37: (.1174999964237216,.1185416629910472] (n = 1550) (mean = .1032258064516129)
Bin #38: (.1185416629910472,.1195833295583728] (n = 1571) (mean = .1031190324633991)
Bin #39: (.1195833295583728,.1206249961256984] (n = 1564) (mean = .110613810741688)
Bin #40: (.1206249961256984,.121666662693024] (n = 1666) (mean = .1236494597839136)
Bin #41: (.121666662693024,.1227083292603496] (n = 1584) (mean = .1174242424242424)
Bin #42: (.1227083292603496,.1237499958276752] (n = 1603) (mean = .1172800998128509)
Bin #43: (.1237499958276752,.1247916623950008] (n = 1622) (mean = .1146732429099877)
Bin #44: (.1247916623950008,.1258333289623264] (n = 1589) (mean = .1126494650723726)
Bin #45: (.1258333289623264,.126874995529652] (n = 1570) (mean = .1235668789808917)
Bin #46: (.126874995529652,.1279166620969776] (n = 1601) (mean = .1349156777014366)
Bin #47: (.1279166620969776,.1289583286643032] (n = 1609) (mean = .1031696706028589)
Bin #48: (.1289583286643032,.1299999952316284] (n = 1582) (mean = .1390644753476612)

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. cmogram acc bac1 if bac1>=0.03 & bac1<0.13, cut(0.08) scatter line(0.08) qfit

Plotting mean of acc, conditional on bac1.

n = 89967

Bin #1: [.0309999994933605,.0321666661295153] (n = 190) (mean = .1736842105263158)
Bin #2: (.0321666661295153,.0333333327656701] (n = 114) (mean = .1140350877192982)
Bin #3: (.0333333327656701,.0344999994018249] (n = 96) (mean = .125)
Bin #4: (.0344999994018249,.0356666660379797] (n = 116) (mean = .0948275862068965)
Bin #5: (.0356666660379797,.0368333326741345] (n = 106) (mean = .1037735849056604)
Bin #6: (.0368333326741345,.0379999993102893] (n = 218) (mean = .1055045871559633)
Bin #7: (.0379999993102893,.0391666659464441] (n = 116) (mean = .1293103448275862)
Bin #8: (.0391666659464441,.0403333325825989] (n = 111) (mean = .1261261261261261)
Bin #9: (.0403333325825989,.0414999992187537] (n = 135) (mean = .0888888888888889)
Bin #10: (.0414999992187537,.0426666658549085] (n = 145) (mean = .096551724137931)
Bin #11: (.0426666658549085,.0438333324910633] (n = 152) (mean = .131578947368421)
Bin #12: (.0438333324910633,.0449999991272181] (n = 145) (mean = .1379310344827586)
Bin #13: (.0449999991272181,.0461666657633729] (n = 309) (mean = .1359223300970874)
Bin #14: (.0461666657633729,.0473333323995277] (n = 165) (mean = .1454545454545454)
Bin #15: (.0473333323995277,.0484999990356825] (n = 200) (mean = .145)
Bin #16: (.0484999990356825,.0496666656718373] (n = 175) (mean = .16)
Bin #17: (.0496666656718373,.0508333323079921] (n = 204) (mean = .1225490196078431)
Bin #18: (.0508333323079921,.0519999989441469] (n = 218) (mean = .1146788990825688)
Bin #19: (.0519999989441469,.0531666655803017] (n = 456) (mean = .1118421052631579)
Bin #20: (.0531666655803017,.0543333322164565] (n = 255) (mean = .1411764705882353)
Bin #21: (.0543333322164565,.0554999988526113] (n = 248) (mean = .1008064516129032)
Bin #22: (.0554999988526113,.0566666654887661] (n = 291) (mean = .0962199312714777)
Bin #23: (.0566666654887661,.0578333321249209] (n = 285) (mean = .1298245614035088)
Bin #24: (.0578333321249209,.0589999987610757] (n = 310) (mean = .1096774193548387)
Bin #25: (.0589999987610757,.0601666653972305] (n = 724) (mean = .1077348066298343)
Bin #26: (.0601666653972305,.0613333320333853] (n = 400) (mean = .1)
Bin #27: (.0613333320333853,.0624999986695401] (n = 415) (mean = .0843373493975904)
Bin #28: (.0624999986695401,.0636666653056949] (n = 493) (mean = .1156186612576065)
Bin #29: (.0636666653056949,.0648333319418497] (n = 472) (mean = .086864406779661)
Bin #30: (.0648333319418497,.0659999985780045] (n = 463) (mean = .0842332613390929)
Bin #31: (.0659999985780045,.0671666652141593] (n = 1046) (mean = .1013384321223709)
Bin #32: (.0671666652141593,.0683333318503141] (n = 586) (mean = .1023890784982935)
Bin #33: (.0683333318503141,.0694999984864689] (n = 638) (mean = .0877742946708464)
Bin #34: (.0694999984864689,.0706666651226237] (n = 638) (mean = .0830721003134796)
Bin #35: (.0706666651226237,.0718333317587785] (n = 689) (mean = .0972423802612482)
Bin #36: (.0718333317587785,.0729999983949333] (n = 732) (mean = .092896174863388)
Bin #37: (.0729999983949333,.0741666650310881] (n = 1534) (mean = .0808344198174707)
Bin #38: (.0741666650310881,.0753333316672429] (n = 839) (mean = .0965435041716329)
Bin #39: (.0753333316672429,.0764999983033977] (n = 822) (mean = .0742092457420925)
Bin #40: (.0764999983033977,.0776666649395525] (n = 855) (mean = .0970760233918129)
Bin #41: (.0776666649395525,.0788333315757073] (n = 904) (mean = .0907079646017699)
Bin #42: (.0788333315757073,.0799999982118607] (n = 1882) (mean = .0887353878852285)
Bin #1: [.08,.0810416665673256] (n = 979) (mean = .0878447395301328)
Bin #2: (.0810416665673256,.0820833331346512] (n = 1099) (mean = .086442220200182)
Bin #3: (.0820833331346512,.0831249997019768] (n = 1110) (mean = .1)
Bin #4: (.0831249997019768,.0841666662693024] (n = 1024) (mean = .076171875)
Bin #5: (.0841666662693024,.085208332836628] (n = 1053) (mean = .0892687559354226)
Bin #6: (.085208332836628,.0862499994039536] (n = 1084) (mean = .0857933579335793)
Bin #7: (.0862499994039536,.0872916659712792] (n = 1167) (mean = .0865467009425878)
Bin #8: (.0872916659712792,.0883333325386048] (n = 1216) (mean = .078125)
Bin #9: (.0883333325386048,.0893749991059304] (n = 1270) (mean = .0818897637795276)
Bin #10: (.0893749991059304,.090416665673256] (n = 1257) (mean = .0922832140015911)
Bin #11: (.090416665673256,.0914583322405816] (n = 1206) (mean = .0970149253731343)
Bin #12: (.0914583322405816,.0924999988079072] (n = 1265) (mean = .0948616600790514)
Bin #13: (.0924999988079072,.0935416653752328] (n = 1325) (mean = .1011320754716981)
Bin #14: (.0935416653752328,.0945833319425584] (n = 1297) (mean = .0894371626831149)
Bin #15: (.0945833319425584,.095624998509884] (n = 1324) (mean = .0740181268882175)
Bin #16: (.095624998509884,.0966666650772096] (n = 1327) (mean = .0957045968349661)
Bin #17: (.0966666650772096,.0977083316445352] (n = 1325) (mean = .089811320754717)
Bin #18: (.0977083316445352,.0987499982118608] (n = 1400) (mean = .0907142857142857)
Bin #19: (.0987499982118608,.0997916647791864] (n = 1439) (mean = .088950660180681)
Bin #20: (.0997916647791864,.100833331346512] (n = 1388) (mean = .0951008645533141)
Bin #21: (.100833331346512,.1018749979138376] (n = 1466) (mean = .0832196452933151)
Bin #22: (.1018749979138376,.1029166644811632] (n = 1446) (mean = .1023513139695712)
Bin #23: (.1029166644811632,.1039583310484888] (n = 1479) (mean = .0899256254225828)
Bin #24: (.1039583310484888,.1049999976158144] (n = 2993) (mean = .0995656531907785)
Bin #25: (.1049999976158144,.10604166418314] (n = 1532) (mean = .0985639686684073)
Bin #26: (.10604166418314,.1070833307504656] (n = 1447) (mean = .0953697304768487)
Bin #27: (.1070833307504656,.1081249973177912] (n = 1506) (mean = .1155378486055777)
Bin #28: (.1081249973177912,.1091666638851168] (n = 1515) (mean = .1062706270627063)
Bin #29: (.1091666638851168,.1102083304524424] (n = 1510) (mean = .1006622516556291)
Bin #30: (.1102083304524424,.111249997019768] (n = 1564) (mean = .0978260869565217)
Bin #31: (.111249997019768,.1122916635870936] (n = 1564) (mean = .1157289002557545)
Bin #32: (.1122916635870936,.1133333301544192] (n = 1575) (mean = .1015873015873016)
Bin #33: (.1133333301544192,.1143749967217448] (n = 1501) (mean = .1112591605596269)
Bin #34: (.1143749967217448,.1154166632890704] (n = 1620) (mean = .1123456790123457)
Bin #35: (.1154166632890704,.116458329856396] (n = 1578) (mean = .0994930291508238)
Bin #36: (.116458329856396,.1174999964237216] (n = 1519) (mean = .0954575378538512)
Bin #37: (.1174999964237216,.1185416629910472] (n = 1550) (mean = .1032258064516129)
Bin #38: (.1185416629910472,.1195833295583728] (n = 1571) (mean = .1031190324633991)
Bin #39: (.1195833295583728,.1206249961256984] (n = 1564) (mean = .110613810741688)
Bin #40: (.1206249961256984,.121666662693024] (n = 1666) (mean = .1236494597839136)
Bin #41: (.121666662693024,.1227083292603496] (n = 1584) (mean = .1174242424242424)
Bin #42: (.1227083292603496,.1237499958276752] (n = 1603) (mean = .1172800998128509)
Bin #43: (.1237499958276752,.1247916623950008] (n = 1622) (mean = .1146732429099877)
Bin #44: (.1247916623950008,.1258333289623264] (n = 1589) (mean = .1126494650723726)
Bin #45: (.1258333289623264,.126874995529652] (n = 1570) (mean = .1235668789808917)
Bin #46: (.126874995529652,.1279166620969776] (n = 1601) (mean = .1349156777014366)
Bin #47: (.1279166620969776,.1289583286643032] (n = 1609) (mean = .1031696706028589)
Bin #48: (.1289583286643032,.1299999952316284] (n = 1582) (mean = .1390644753476612)

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. cmogram acc bac1 if bac1>=0.03 & bac1<0.13, cut(0.08) scatter line(0.08) qfitci

Plotting mean of acc, conditional on bac1.

n = 89967

Bin #1: [.0309999994933605,.0321666661295153] (n = 190) (mean = .1736842105263158)
Bin #2: (.0321666661295153,.0333333327656701] (n = 114) (mean = .1140350877192982)
Bin #3: (.0333333327656701,.0344999994018249] (n = 96) (mean = .125)
Bin #4: (.0344999994018249,.0356666660379797] (n = 116) (mean = .0948275862068965)
Bin #5: (.0356666660379797,.0368333326741345] (n = 106) (mean = .1037735849056604)
Bin #6: (.0368333326741345,.0379999993102893] (n = 218) (mean = .1055045871559633)
Bin #7: (.0379999993102893,.0391666659464441] (n = 116) (mean = .1293103448275862)
Bin #8: (.0391666659464441,.0403333325825989] (n = 111) (mean = .1261261261261261)
Bin #9: (.0403333325825989,.0414999992187537] (n = 135) (mean = .0888888888888889)
Bin #10: (.0414999992187537,.0426666658549085] (n = 145) (mean = .096551724137931)
Bin #11: (.0426666658549085,.0438333324910633] (n = 152) (mean = .131578947368421)
Bin #12: (.0438333324910633,.0449999991272181] (n = 145) (mean = .1379310344827586)
Bin #13: (.0449999991272181,.0461666657633729] (n = 309) (mean = .1359223300970874)
Bin #14: (.0461666657633729,.0473333323995277] (n = 165) (mean = .1454545454545454)
Bin #15: (.0473333323995277,.0484999990356825] (n = 200) (mean = .145)
Bin #16: (.0484999990356825,.0496666656718373] (n = 175) (mean = .16)
Bin #17: (.0496666656718373,.0508333323079921] (n = 204) (mean = .1225490196078431)
Bin #18: (.0508333323079921,.0519999989441469] (n = 218) (mean = .1146788990825688)
Bin #19: (.0519999989441469,.0531666655803017] (n = 456) (mean = .1118421052631579)
Bin #20: (.0531666655803017,.0543333322164565] (n = 255) (mean = .1411764705882353)
Bin #21: (.0543333322164565,.0554999988526113] (n = 248) (mean = .1008064516129032)
Bin #22: (.0554999988526113,.0566666654887661] (n = 291) (mean = .0962199312714777)
Bin #23: (.0566666654887661,.0578333321249209] (n = 285) (mean = .1298245614035088)
Bin #24: (.0578333321249209,.0589999987610757] (n = 310) (mean = .1096774193548387)
Bin #25: (.0589999987610757,.0601666653972305] (n = 724) (mean = .1077348066298343)
Bin #26: (.0601666653972305,.0613333320333853] (n = 400) (mean = .1)
Bin #27: (.0613333320333853,.0624999986695401] (n = 415) (mean = .0843373493975904)
Bin #28: (.0624999986695401,.0636666653056949] (n = 493) (mean = .1156186612576065)
Bin #29: (.0636666653056949,.0648333319418497] (n = 472) (mean = .086864406779661)
Bin #30: (.0648333319418497,.0659999985780045] (n = 463) (mean = .0842332613390929)
Bin #31: (.0659999985780045,.0671666652141593] (n = 1046) (mean = .1013384321223709)
Bin #32: (.0671666652141593,.0683333318503141] (n = 586) (mean = .1023890784982935)
Bin #33: (.0683333318503141,.0694999984864689] (n = 638) (mean = .0877742946708464)
Bin #34: (.0694999984864689,.0706666651226237] (n = 638) (mean = .0830721003134796)
Bin #35: (.0706666651226237,.0718333317587785] (n = 689) (mean = .0972423802612482)
Bin #36: (.0718333317587785,.0729999983949333] (n = 732) (mean = .092896174863388)
Bin #37: (.0729999983949333,.0741666650310881] (n = 1534) (mean = .0808344198174707)
Bin #38: (.0741666650310881,.0753333316672429] (n = 839) (mean = .0965435041716329)
Bin #39: (.0753333316672429,.0764999983033977] (n = 822) (mean = .0742092457420925)
Bin #40: (.0764999983033977,.0776666649395525] (n = 855) (mean = .0970760233918129)
Bin #41: (.0776666649395525,.0788333315757073] (n = 904) (mean = .0907079646017699)
Bin #42: (.0788333315757073,.0799999982118607] (n = 1882) (mean = .0887353878852285)
Bin #1: [.08,.0810416665673256] (n = 979) (mean = .0878447395301328)
Bin #2: (.0810416665673256,.0820833331346512] (n = 1099) (mean = .086442220200182)
Bin #3: (.0820833331346512,.0831249997019768] (n = 1110) (mean = .1)
Bin #4: (.0831249997019768,.0841666662693024] (n = 1024) (mean = .076171875)
Bin #5: (.0841666662693024,.085208332836628] (n = 1053) (mean = .0892687559354226)
Bin #6: (.085208332836628,.0862499994039536] (n = 1084) (mean = .0857933579335793)
Bin #7: (.0862499994039536,.0872916659712792] (n = 1167) (mean = .0865467009425878)
Bin #8: (.0872916659712792,.0883333325386048] (n = 1216) (mean = .078125)
Bin #9: (.0883333325386048,.0893749991059304] (n = 1270) (mean = .0818897637795276)
Bin #10: (.0893749991059304,.090416665673256] (n = 1257) (mean = .0922832140015911)
Bin #11: (.090416665673256,.0914583322405816] (n = 1206) (mean = .0970149253731343)
Bin #12: (.0914583322405816,.0924999988079072] (n = 1265) (mean = .0948616600790514)
Bin #13: (.0924999988079072,.0935416653752328] (n = 1325) (mean = .1011320754716981)
Bin #14: (.0935416653752328,.0945833319425584] (n = 1297) (mean = .0894371626831149)
Bin #15: (.0945833319425584,.095624998509884] (n = 1324) (mean = .0740181268882175)
Bin #16: (.095624998509884,.0966666650772096] (n = 1327) (mean = .0957045968349661)
Bin #17: (.0966666650772096,.0977083316445352] (n = 1325) (mean = .089811320754717)
Bin #18: (.0977083316445352,.0987499982118608] (n = 1400) (mean = .0907142857142857)
Bin #19: (.0987499982118608,.0997916647791864] (n = 1439) (mean = .088950660180681)
Bin #20: (.0997916647791864,.100833331346512] (n = 1388) (mean = .0951008645533141)
Bin #21: (.100833331346512,.1018749979138376] (n = 1466) (mean = .0832196452933151)
Bin #22: (.1018749979138376,.1029166644811632] (n = 1446) (mean = .1023513139695712)
Bin #23: (.1029166644811632,.1039583310484888] (n = 1479) (mean = .0899256254225828)
Bin #24: (.1039583310484888,.1049999976158144] (n = 2993) (mean = .0995656531907785)
Bin #25: (.1049999976158144,.10604166418314] (n = 1532) (mean = .0985639686684073)
Bin #26: (.10604166418314,.1070833307504656] (n = 1447) (mean = .0953697304768487)
Bin #27: (.1070833307504656,.1081249973177912] (n = 1506) (mean = .1155378486055777)
Bin #28: (.1081249973177912,.1091666638851168] (n = 1515) (mean = .1062706270627063)
Bin #29: (.1091666638851168,.1102083304524424] (n = 1510) (mean = .1006622516556291)
Bin #30: (.1102083304524424,.111249997019768] (n = 1564) (mean = .0978260869565217)
Bin #31: (.111249997019768,.1122916635870936] (n = 1564) (mean = .1157289002557545)
Bin #32: (.1122916635870936,.1133333301544192] (n = 1575) (mean = .1015873015873016)
Bin #33: (.1133333301544192,.1143749967217448] (n = 1501) (mean = .1112591605596269)
Bin #34: (.1143749967217448,.1154166632890704] (n = 1620) (mean = .1123456790123457)
Bin #35: (.1154166632890704,.116458329856396] (n = 1578) (mean = .0994930291508238)
Bin #36: (.116458329856396,.1174999964237216] (n = 1519) (mean = .0954575378538512)
Bin #37: (.1174999964237216,.1185416629910472] (n = 1550) (mean = .1032258064516129)
Bin #38: (.1185416629910472,.1195833295583728] (n = 1571) (mean = .1031190324633991)
Bin #39: (.1195833295583728,.1206249961256984] (n = 1564) (mean = .110613810741688)
Bin #40: (.1206249961256984,.121666662693024] (n = 1666) (mean = .1236494597839136)
Bin #41: (.121666662693024,.1227083292603496] (n = 1584) (mean = .1174242424242424)
Bin #42: (.1227083292603496,.1237499958276752] (n = 1603) (mean = .1172800998128509)
Bin #43: (.1237499958276752,.1247916623950008] (n = 1622) (mean = .1146732429099877)
Bin #44: (.1247916623950008,.1258333289623264] (n = 1589) (mean = .1126494650723726)
Bin #45: (.1258333289623264,.126874995529652] (n = 1570) (mean = .1235668789808917)
Bin #46: (.126874995529652,.1279166620969776] (n = 1601) (mean = .1349156777014366)
Bin #47: (.1279166620969776,.1289583286643032] (n = 1609) (mean = .1031696706028589)
Bin #48: (.1289583286643032,.1299999952316284] (n = 1582) (mean = .1390644753476612)

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. gen bac1_sq = bac1^2

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. reg acc dui##c.(bac1 bac1_sq) if bac1>=0.03 & bac1<=0.13, robust //not going to cluster on the running

Linear regression                               Number of obs     =     89,967
                                                F(5, 89961)       =      26.68
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0015
                                                Root MSE          =     .30138

-------------------------------------------------------------------------------
              |               Robust
          acc | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
--------------+----------------------------------------------------------------
        1.dui |  -.0291995   .0848238    -0.34   0.731    -.1954533    .1370542
         bac1 |  -1.118108   1.685725    -0.66   0.507    -4.422112    2.185896
      bac1_sq |   .1864309   13.92311     0.01   0.989    -27.10274     27.4756
              |
   dui#c.bac1 |
           1  |  -.5001414   2.139587    -0.23   0.815    -4.693711    3.693428
              |
dui#c.bac1_sq |
           1  |   11.15565    15.2488     0.73   0.464    -18.73185    41.04315
              |
        _cons |   .1717301   .0495441     3.47   0.001     .0746241    .2688361
-------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. cmogram acc bac1 if bac1>=0.03 & bac1<0.13, cut(0.08) scatter line(0.08) lfitci

Plotting mean of acc, conditional on bac1.

n = 89967

Bin #1: [.0309999994933605,.0321666661295153] (n = 190) (mean = .1736842105263158)
Bin #2: (.0321666661295153,.0333333327656701] (n = 114) (mean = .1140350877192982)
Bin #3: (.0333333327656701,.0344999994018249] (n = 96) (mean = .125)
Bin #4: (.0344999994018249,.0356666660379797] (n = 116) (mean = .0948275862068965)
Bin #5: (.0356666660379797,.0368333326741345] (n = 106) (mean = .1037735849056604)
Bin #6: (.0368333326741345,.0379999993102893] (n = 218) (mean = .1055045871559633)
Bin #7: (.0379999993102893,.0391666659464441] (n = 116) (mean = .1293103448275862)
Bin #8: (.0391666659464441,.0403333325825989] (n = 111) (mean = .1261261261261261)
Bin #9: (.0403333325825989,.0414999992187537] (n = 135) (mean = .0888888888888889)
Bin #10: (.0414999992187537,.0426666658549085] (n = 145) (mean = .096551724137931)
Bin #11: (.0426666658549085,.0438333324910633] (n = 152) (mean = .131578947368421)
Bin #12: (.0438333324910633,.0449999991272181] (n = 145) (mean = .1379310344827586)
Bin #13: (.0449999991272181,.0461666657633729] (n = 309) (mean = .1359223300970874)
Bin #14: (.0461666657633729,.0473333323995277] (n = 165) (mean = .1454545454545454)
Bin #15: (.0473333323995277,.0484999990356825] (n = 200) (mean = .145)
Bin #16: (.0484999990356825,.0496666656718373] (n = 175) (mean = .16)
Bin #17: (.0496666656718373,.0508333323079921] (n = 204) (mean = .1225490196078431)
Bin #18: (.0508333323079921,.0519999989441469] (n = 218) (mean = .1146788990825688)
Bin #19: (.0519999989441469,.0531666655803017] (n = 456) (mean = .1118421052631579)
Bin #20: (.0531666655803017,.0543333322164565] (n = 255) (mean = .1411764705882353)
Bin #21: (.0543333322164565,.0554999988526113] (n = 248) (mean = .1008064516129032)
Bin #22: (.0554999988526113,.0566666654887661] (n = 291) (mean = .0962199312714777)
Bin #23: (.0566666654887661,.0578333321249209] (n = 285) (mean = .1298245614035088)
Bin #24: (.0578333321249209,.0589999987610757] (n = 310) (mean = .1096774193548387)
Bin #25: (.0589999987610757,.0601666653972305] (n = 724) (mean = .1077348066298343)
Bin #26: (.0601666653972305,.0613333320333853] (n = 400) (mean = .1)
Bin #27: (.0613333320333853,.0624999986695401] (n = 415) (mean = .0843373493975904)
Bin #28: (.0624999986695401,.0636666653056949] (n = 493) (mean = .1156186612576065)
Bin #29: (.0636666653056949,.0648333319418497] (n = 472) (mean = .086864406779661)
Bin #30: (.0648333319418497,.0659999985780045] (n = 463) (mean = .0842332613390929)
Bin #31: (.0659999985780045,.0671666652141593] (n = 1046) (mean = .1013384321223709)
Bin #32: (.0671666652141593,.0683333318503141] (n = 586) (mean = .1023890784982935)
Bin #33: (.0683333318503141,.0694999984864689] (n = 638) (mean = .0877742946708464)
Bin #34: (.0694999984864689,.0706666651226237] (n = 638) (mean = .0830721003134796)
Bin #35: (.0706666651226237,.0718333317587785] (n = 689) (mean = .0972423802612482)
Bin #36: (.0718333317587785,.0729999983949333] (n = 732) (mean = .092896174863388)
Bin #37: (.0729999983949333,.0741666650310881] (n = 1534) (mean = .0808344198174707)
Bin #38: (.0741666650310881,.0753333316672429] (n = 839) (mean = .0965435041716329)
Bin #39: (.0753333316672429,.0764999983033977] (n = 822) (mean = .0742092457420925)
Bin #40: (.0764999983033977,.0776666649395525] (n = 855) (mean = .0970760233918129)
Bin #41: (.0776666649395525,.0788333315757073] (n = 904) (mean = .0907079646017699)
Bin #42: (.0788333315757073,.0799999982118607] (n = 1882) (mean = .0887353878852285)
Bin #1: [.08,.0810416665673256] (n = 979) (mean = .0878447395301328)
Bin #2: (.0810416665673256,.0820833331346512] (n = 1099) (mean = .086442220200182)
Bin #3: (.0820833331346512,.0831249997019768] (n = 1110) (mean = .1)
Bin #4: (.0831249997019768,.0841666662693024] (n = 1024) (mean = .076171875)
Bin #5: (.0841666662693024,.085208332836628] (n = 1053) (mean = .0892687559354226)
Bin #6: (.085208332836628,.0862499994039536] (n = 1084) (mean = .0857933579335793)
Bin #7: (.0862499994039536,.0872916659712792] (n = 1167) (mean = .0865467009425878)
Bin #8: (.0872916659712792,.0883333325386048] (n = 1216) (mean = .078125)
Bin #9: (.0883333325386048,.0893749991059304] (n = 1270) (mean = .0818897637795276)
Bin #10: (.0893749991059304,.090416665673256] (n = 1257) (mean = .0922832140015911)
Bin #11: (.090416665673256,.0914583322405816] (n = 1206) (mean = .0970149253731343)
Bin #12: (.0914583322405816,.0924999988079072] (n = 1265) (mean = .0948616600790514)
Bin #13: (.0924999988079072,.0935416653752328] (n = 1325) (mean = .1011320754716981)
Bin #14: (.0935416653752328,.0945833319425584] (n = 1297) (mean = .0894371626831149)
Bin #15: (.0945833319425584,.095624998509884] (n = 1324) (mean = .0740181268882175)
Bin #16: (.095624998509884,.0966666650772096] (n = 1327) (mean = .0957045968349661)
Bin #17: (.0966666650772096,.0977083316445352] (n = 1325) (mean = .089811320754717)
Bin #18: (.0977083316445352,.0987499982118608] (n = 1400) (mean = .0907142857142857)
Bin #19: (.0987499982118608,.0997916647791864] (n = 1439) (mean = .088950660180681)
Bin #20: (.0997916647791864,.100833331346512] (n = 1388) (mean = .0951008645533141)
Bin #21: (.100833331346512,.1018749979138376] (n = 1466) (mean = .0832196452933151)
Bin #22: (.1018749979138376,.1029166644811632] (n = 1446) (mean = .1023513139695712)
Bin #23: (.1029166644811632,.1039583310484888] (n = 1479) (mean = .0899256254225828)
Bin #24: (.1039583310484888,.1049999976158144] (n = 2993) (mean = .0995656531907785)
Bin #25: (.1049999976158144,.10604166418314] (n = 1532) (mean = .0985639686684073)
Bin #26: (.10604166418314,.1070833307504656] (n = 1447) (mean = .0953697304768487)
Bin #27: (.1070833307504656,.1081249973177912] (n = 1506) (mean = .1155378486055777)
Bin #28: (.1081249973177912,.1091666638851168] (n = 1515) (mean = .1062706270627063)
Bin #29: (.1091666638851168,.1102083304524424] (n = 1510) (mean = .1006622516556291)
Bin #30: (.1102083304524424,.111249997019768] (n = 1564) (mean = .0978260869565217)
Bin #31: (.111249997019768,.1122916635870936] (n = 1564) (mean = .1157289002557545)
Bin #32: (.1122916635870936,.1133333301544192] (n = 1575) (mean = .1015873015873016)
Bin #33: (.1133333301544192,.1143749967217448] (n = 1501) (mean = .1112591605596269)
Bin #34: (.1143749967217448,.1154166632890704] (n = 1620) (mean = .1123456790123457)
Bin #35: (.1154166632890704,.116458329856396] (n = 1578) (mean = .0994930291508238)
Bin #36: (.116458329856396,.1174999964237216] (n = 1519) (mean = .0954575378538512)
Bin #37: (.1174999964237216,.1185416629910472] (n = 1550) (mean = .1032258064516129)
Bin #38: (.1185416629910472,.1195833295583728] (n = 1571) (mean = .1031190324633991)
Bin #39: (.1195833295583728,.1206249961256984] (n = 1564) (mean = .110613810741688)
Bin #40: (.1206249961256984,.121666662693024] (n = 1666) (mean = .1236494597839136)
Bin #41: (.121666662693024,.1227083292603496] (n = 1584) (mean = .1174242424242424)
Bin #42: (.1227083292603496,.1237499958276752] (n = 1603) (mean = .1172800998128509)
Bin #43: (.1237499958276752,.1247916623950008] (n = 1622) (mean = .1146732429099877)
Bin #44: (.1247916623950008,.1258333289623264] (n = 1589) (mean = .1126494650723726)
Bin #45: (.1258333289623264,.126874995529652] (n = 1570) (mean = .1235668789808917)
Bin #46: (.126874995529652,.1279166620969776] (n = 1601) (mean = .1349156777014366)
Bin #47: (.1279166620969776,.1289583286643032] (n = 1609) (mean = .1031696706028589)
Bin #48: (.1289583286643032,.1299999952316284] (n = 1582) (mean = .1390644753476612)

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. reg acc dui##c.bac1 if bac1>=0.04 & bac1<=0.12, robust //not going to cluster on the running

Linear regression                               Number of obs     =     72,880
                                                F(3, 72876)       =      19.77
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0009
                                                Root MSE          =     .29559

------------------------------------------------------------------------------
             |               Robust
         acc | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
       1.dui |  -.1466442   .0194132    -7.55   0.000    -.1846939   -.1085944
        bac1 |  -1.229349   .2291529    -5.36   0.000    -1.678488   -.7802105
             |
  dui#c.bac1 |
          1  |   1.842633   .2547059     7.23   0.000     1.343411    2.341856
             |
       _cons |   .1805575   .0157707    11.45   0.000      .149647     .211468
------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. reg aged dui##c.bac1 if bac1>=0.03 & bac1<=0.13, robust //not going to cluster on the running

Linear regression                               Number of obs     =     89,967
                                                F(3, 89963)       =      62.95
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0023
                                                Root MSE          =     11.573

------------------------------------------------------------------------------
             |               Robust
        aged | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
       1.dui |  -6.224398   .5861375   -10.62   0.000    -7.373222   -5.075574
        bac1 |  -69.16366    7.22027    -9.58   0.000    -83.31532   -55.01201
             |
  dui#c.bac1 |
          1  |   76.04933   7.843989     9.70   0.000     60.67519    91.42347
             |
       _cons |   39.45299   .4831018    81.67   0.000     38.50611    40.39986
------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. cmogram aged bac1 if bac1>=0.03 & bac1<0.13, cut(0.08) scatter line(0.08) lfitci

Plotting mean of aged, conditional on bac1.

n = 89967

Bin #1: [.0309999994933605,.0321666661295153] (n = 190) (mean = 37.31052631578947)
Bin #2: (.0321666661295153,.0333333327656701] (n = 114) (mean = 38.20175438596491)
Bin #3: (.0333333327656701,.0344999994018249] (n = 96) (mean = 38.3125)
Bin #4: (.0344999994018249,.0356666660379797] (n = 116) (mean = 36.44827586206897)
Bin #5: (.0356666660379797,.0368333326741345] (n = 106) (mean = 37.25471698113208)
Bin #6: (.0368333326741345,.0379999993102893] (n = 218) (mean = 36.21559633027523)
Bin #7: (.0379999993102893,.0391666659464441] (n = 116) (mean = 36.46551724137931)
Bin #8: (.0391666659464441,.0403333325825989] (n = 111) (mean = 39.36036036036036)
Bin #9: (.0403333325825989,.0414999992187537] (n = 135) (mean = 38.34814814814815)
Bin #10: (.0414999992187537,.0426666658549085] (n = 145) (mean = 35.95862068965517)
Bin #11: (.0426666658549085,.0438333324910633] (n = 152) (mean = 35.63815789473684)
Bin #12: (.0438333324910633,.0449999991272181] (n = 145) (mean = 36.75172413793103)
Bin #13: (.0449999991272181,.0461666657633729] (n = 309) (mean = 35.65695792880259)
Bin #14: (.0461666657633729,.0473333323995277] (n = 165) (mean = 36.95151515151515)
Bin #15: (.0473333323995277,.0484999990356825] (n = 200) (mean = 35.255)
Bin #16: (.0484999990356825,.0496666656718373] (n = 175) (mean = 37.05142857142857)
Bin #17: (.0496666656718373,.0508333323079921] (n = 204) (mean = 35.31862745098039)
Bin #18: (.0508333323079921,.0519999989441469] (n = 218) (mean = 37.01376146788991)
Bin #19: (.0519999989441469,.0531666655803017] (n = 456) (mean = 35.93640350877193)
Bin #20: (.0531666655803017,.0543333322164565] (n = 255) (mean = 34.96862745098039)
Bin #21: (.0543333322164565,.0554999988526113] (n = 248) (mean = 34.98387096774194)
Bin #22: (.0554999988526113,.0566666654887661] (n = 291) (mean = 34.85910652920962)
Bin #23: (.0566666654887661,.0578333321249209] (n = 285) (mean = 35.57543859649122)
Bin #24: (.0578333321249209,.0589999987610757] (n = 310) (mean = 35.33870967741935)
Bin #25: (.0589999987610757,.0601666653972305] (n = 724) (mean = 35.05386740331492)
Bin #26: (.0601666653972305,.0613333320333853] (n = 400) (mean = 34.6625)
Bin #27: (.0613333320333853,.0624999986695401] (n = 415) (mean = 35.77831325301205)
Bin #28: (.0624999986695401,.0636666653056949] (n = 493) (mean = 34.64097363083165)
Bin #29: (.0636666653056949,.0648333319418497] (n = 472) (mean = 35.82203389830509)
Bin #30: (.0648333319418497,.0659999985780045] (n = 463) (mean = 34.55075593952484)
Bin #31: (.0659999985780045,.0671666652141593] (n = 1046) (mean = 35.11472275334608)
Bin #32: (.0671666652141593,.0683333318503141] (n = 586) (mean = 34.47781569965871)
Bin #33: (.0683333318503141,.0694999984864689] (n = 638) (mean = 34.47962382445141)
Bin #34: (.0694999984864689,.0706666651226237] (n = 638) (mean = 34.72884012539185)
Bin #35: (.0706666651226237,.0718333317587785] (n = 689) (mean = 34.8577648766328)
Bin #36: (.0718333317587785,.0729999983949333] (n = 732) (mean = 34.14344262295082)
Bin #37: (.0729999983949333,.0741666650310881] (n = 1534) (mean = 34.24315514993481)
Bin #38: (.0741666650310881,.0753333316672429] (n = 839) (mean = 34.0357568533969)
Bin #39: (.0753333316672429,.0764999983033977] (n = 822) (mean = 34.28345498783455)
Bin #40: (.0764999983033977,.0776666649395525] (n = 855) (mean = 34.68538011695907)
Bin #41: (.0776666649395525,.0788333315757073] (n = 904) (mean = 34.59402654867257)
Bin #42: (.0788333315757073,.0799999982118607] (n = 1882) (mean = 33.76620616365569)
Bin #1: [.08,.0810416665673256] (n = 979) (mean = 34.34320735444331)
Bin #2: (.0810416665673256,.0820833331346512] (n = 1099) (mean = 34.35395814376706)
Bin #3: (.0820833331346512,.0831249997019768] (n = 1110) (mean = 33.44684684684685)
Bin #4: (.0831249997019768,.0841666662693024] (n = 1024) (mean = 33.982421875)
Bin #5: (.0841666662693024,.085208332836628] (n = 1053) (mean = 33.66856600189934)
Bin #6: (.085208332836628,.0862499994039536] (n = 1084) (mean = 33.95387453874539)
Bin #7: (.0862499994039536,.0872916659712792] (n = 1167) (mean = 33.38988860325621)
Bin #8: (.0872916659712792,.0883333325386048] (n = 1216) (mean = 33.70394736842105)
Bin #9: (.0883333325386048,.0893749991059304] (n = 1270) (mean = 33.84488188976378)
Bin #10: (.0893749991059304,.090416665673256] (n = 1257) (mean = 33.92442322991249)
Bin #11: (.090416665673256,.0914583322405816] (n = 1206) (mean = 33.47346600331675)
Bin #12: (.0914583322405816,.0924999988079072] (n = 1265) (mean = 34.28932806324111)
Bin #13: (.0924999988079072,.0935416653752328] (n = 1325) (mean = 34.09811320754717)
Bin #14: (.0935416653752328,.0945833319425584] (n = 1297) (mean = 33.92906707787201)
Bin #15: (.0945833319425584,.095624998509884] (n = 1324) (mean = 34.01737160120846)
Bin #16: (.095624998509884,.0966666650772096] (n = 1327) (mean = 33.87565938206481)
Bin #17: (.0966666650772096,.0977083316445352] (n = 1325) (mean = 33.79396226415094)
Bin #18: (.0977083316445352,.0987499982118608] (n = 1400) (mean = 33.75357142857143)
Bin #19: (.0987499982118608,.0997916647791864] (n = 1439) (mean = 34.20361362056984)
Bin #20: (.0997916647791864,.100833331346512] (n = 1388) (mean = 34.03890489913545)
Bin #21: (.100833331346512,.1018749979138376] (n = 1466) (mean = 34.25920873124147)
Bin #22: (.1018749979138376,.1029166644811632] (n = 1446) (mean = 34.02489626556017)
Bin #23: (.1029166644811632,.1039583310484888] (n = 1479) (mean = 33.4604462474645)
Bin #24: (.1039583310484888,.1049999976158144] (n = 2993) (mean = 33.88473103909121)
Bin #25: (.1049999976158144,.10604166418314] (n = 1532) (mean = 33.71409921671018)
Bin #26: (.10604166418314,.1070833307504656] (n = 1447) (mean = 33.69523151347616)
Bin #27: (.1070833307504656,.1081249973177912] (n = 1506) (mean = 33.44422310756972)
Bin #28: (.1081249973177912,.1091666638851168] (n = 1515) (mean = 34.13069306930693)
Bin #29: (.1091666638851168,.1102083304524424] (n = 1510) (mean = 33.73046357615894)
Bin #30: (.1102083304524424,.111249997019768] (n = 1564) (mean = 34.04092071611253)
Bin #31: (.111249997019768,.1122916635870936] (n = 1564) (mean = 33.55306905370844)
Bin #32: (.1122916635870936,.1133333301544192] (n = 1575) (mean = 33.71555555555555)
Bin #33: (.1133333301544192,.1143749967217448] (n = 1501) (mean = 34.22518321119254)
Bin #34: (.1143749967217448,.1154166632890704] (n = 1620) (mean = 34.28271604938271)
Bin #35: (.1154166632890704,.116458329856396] (n = 1578) (mean = 33.81305449936629)
Bin #36: (.116458329856396,.1174999964237216] (n = 1519) (mean = 34.1909150757077)
Bin #37: (.1174999964237216,.1185416629910472] (n = 1550) (mean = 33.83677419354839)
Bin #38: (.1185416629910472,.1195833295583728] (n = 1571) (mean = 34.30362826225334)
Bin #39: (.1195833295583728,.1206249961256984] (n = 1564) (mean = 33.6118925831202)
Bin #40: (.1206249961256984,.121666662693024] (n = 1666) (mean = 34.6578631452581)
Bin #41: (.121666662693024,.1227083292603496] (n = 1584) (mean = 34.08270202020202)
Bin #42: (.1227083292603496,.1237499958276752] (n = 1603) (mean = 34.18964441671865)
Bin #43: (.1237499958276752,.1247916623950008] (n = 1622) (mean = 33.61528976572133)
Bin #44: (.1247916623950008,.1258333289623264] (n = 1589) (mean = 34.04216488357458)
Bin #45: (.1258333289623264,.126874995529652] (n = 1570) (mean = 34.44076433121019)
Bin #46: (.126874995529652,.1279166620969776] (n = 1601) (mean = 34.27982510930669)
Bin #47: (.1279166620969776,.1289583286643032] (n = 1609) (mean = 34.0602858918583)
Bin #48: (.1289583286643032,.1299999952316284] (n = 1582) (mean = 34.82111251580278)

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. reg aged dui##c.(bac1 bac1_sq) if bac1>=0.03 & bac1<=0.13, robust //not going to cluster on the running

Linear regression                               Number of obs     =     89,967
                                                F(5, 89961)       =      38.52
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0024
                                                Root MSE          =     11.573

-------------------------------------------------------------------------------
              |               Robust
         aged | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
--------------+----------------------------------------------------------------
        1.dui |  -3.414613   3.255721    -1.05   0.294    -9.795794    2.966568
         bac1 |  -134.5879   65.20363    -2.06   0.039    -262.3864    -6.78939
      bac1_sq |   549.1037   540.9332     1.02   0.310    -511.1202    1609.328
              |
   dui#c.bac1 |
           1  |   52.25901   82.30474     0.63   0.525    -109.0575    213.5755
              |
dui#c.bac1_sq |
           1  |  -129.3624   590.0434    -0.22   0.826    -1285.842    1027.117
              |
        _cons |   41.30048   1.904833    21.68   0.000     37.56703    45.03394
-------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. reg recidivism white male aged acc dui##c.bac1 if bac1>=0.03 & bac1<=0.13, robust

Linear regression                               Number of obs     =     89,967
                                                F(7, 89959)       =      51.13
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0036
                                                Root MSE          =     .30849

------------------------------------------------------------------------------
             |               Robust
  recidivism | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
       white |   .0162238   .0028024     5.79   0.000     .0107311    .0217166
        male |   .0331803   .0023289    14.25   0.000     .0286157    .0377449
        aged |  -.0008537    .000085   -10.05   0.000    -.0010203   -.0006872
         acc |   .0042096    .003452     1.22   0.223    -.0025562    .0109754
       1.dui |  -.0590663   .0152111    -3.88   0.000    -.0888798   -.0292528
        bac1 |  -.0428678   .1866322    -0.23   0.818    -.4086651    .3229296
             |
  dui#c.bac1 |
          1  |   .4380899   .2037978     2.15   0.032     .0386482    .8375316
             |
       _cons |   .1093521    .013144     8.32   0.000     .0835899    .1351142
------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. reg recidivism white male aged acc dui##c.(bac1 bac1_sq) if bac1>=0.03 & bac1<=0.13, robust

Linear regression                               Number of obs     =     89,967
                                                F(9, 89957)       =      40.23
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0037
                                                Root MSE          =     .30848

-------------------------------------------------------------------------------
              |               Robust
   recidivism | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
--------------+----------------------------------------------------------------
        white |   .0162247   .0028024     5.79   0.000     .0107321    .0217173
         male |   .0332123   .0023288    14.26   0.000      .028648    .0377767
         aged |  -.0008538    .000085   -10.05   0.000    -.0010203   -.0006872
          acc |   .0041839   .0034514     1.21   0.225    -.0025807    .0109485
        1.dui |   .1130103   .0842584     1.34   0.180    -.0521355     .278156
         bac1 |   2.902052   1.637199     1.77   0.076    -.3068422    6.110947
      bac1_sq |  -24.71686   13.73897    -1.80   0.072    -51.64511     2.21139
              |
   dui#c.bac1 |
           1  |  -4.210133   2.111312    -1.99   0.046    -8.348284   -.0719824
              |
dui#c.bac1_sq |
           1  |   32.73074   15.10452     2.17   0.030     3.126026    62.33545
              |
        _cons |   .0261714   .0473158     0.55   0.580    -.0665672      .11891
-------------------------------------------------------------------------------

. 
end of do-file

. help cmogram

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. cmogram recidivism bac1 if bac1>0.03 & bac1<0.13, cut(0.08) scatter line(0.08) lfitci

Plotting mean of recidivism, conditional on bac1.

n = 89967

Bin #1: [.0309999994933605,.0321666661295153] (n = 190) (mean = .0789473684210526)
Bin #2: (.0321666661295153,.0333333327656701] (n = 114) (mean = .1052631578947368)
Bin #3: (.0333333327656701,.0344999994018249] (n = 96) (mean = .09375)
Bin #4: (.0344999994018249,.0356666660379797] (n = 116) (mean = .0862068965517241)
Bin #5: (.0356666660379797,.0368333326741345] (n = 106) (mean = .1037735849056604)
Bin #6: (.0368333326741345,.0379999993102893] (n = 218) (mean = .1192660550458716)
Bin #7: (.0379999993102893,.0391666659464441] (n = 116) (mean = .103448275862069)
Bin #8: (.0391666659464441,.0403333325825989] (n = 111) (mean = .1081081081081081)
Bin #9: (.0403333325825989,.0414999992187537] (n = 135) (mean = .1407407407407407)
Bin #10: (.0414999992187537,.0426666658549085] (n = 145) (mean = .0896551724137931)
Bin #11: (.0426666658549085,.0438333324910633] (n = 152) (mean = .1381578947368421)
Bin #12: (.0438333324910633,.0449999991272181] (n = 145) (mean = .1310344827586207)
Bin #13: (.0449999991272181,.0461666657633729] (n = 309) (mean = .1488673139158576)
Bin #14: (.0461666657633729,.0473333323995277] (n = 165) (mean = .1090909090909091)
Bin #15: (.0473333323995277,.0484999990356825] (n = 200) (mean = .12)
Bin #16: (.0484999990356825,.0496666656718373] (n = 175) (mean = .1371428571428571)
Bin #17: (.0496666656718373,.0508333323079921] (n = 204) (mean = .1176470588235294)
Bin #18: (.0508333323079921,.0519999989441469] (n = 218) (mean = .1330275229357798)
Bin #19: (.0519999989441469,.0531666655803017] (n = 456) (mean = .1118421052631579)
Bin #20: (.0531666655803017,.0543333322164565] (n = 255) (mean = .1215686274509804)
Bin #21: (.0543333322164565,.0554999988526113] (n = 248) (mean = .1330645161290323)
Bin #22: (.0554999988526113,.0566666654887661] (n = 291) (mean = .0996563573883162)
Bin #23: (.0566666654887661,.0578333321249209] (n = 285) (mean = .1298245614035088)
Bin #24: (.0578333321249209,.0589999987610757] (n = 310) (mean = .1032258064516129)
Bin #25: (.0589999987610757,.0601666653972305] (n = 724) (mean = .1146408839779006)
Bin #26: (.0601666653972305,.0613333320333853] (n = 400) (mean = .1375)
Bin #27: (.0613333320333853,.0624999986695401] (n = 415) (mean = .1325301204819277)
Bin #28: (.0624999986695401,.0636666653056949] (n = 493) (mean = .101419878296146)
Bin #29: (.0636666653056949,.0648333319418497] (n = 472) (mean = .1059322033898305)
Bin #30: (.0648333319418497,.0659999985780045] (n = 463) (mean = .1274298056155508)
Bin #31: (.0659999985780045,.0671666652141593] (n = 1046) (mean = .132887189292543)
Bin #32: (.0671666652141593,.0683333318503141] (n = 586) (mean = .1040955631399317)
Bin #33: (.0683333318503141,.0694999984864689] (n = 638) (mean = .1253918495297806)
Bin #34: (.0694999984864689,.0706666651226237] (n = 638) (mean = .109717868338558)
Bin #35: (.0706666651226237,.0718333317587785] (n = 689) (mean = .1132075471698113)
Bin #36: (.0718333317587785,.0729999983949333] (n = 732) (mean = .116120218579235)
Bin #37: (.0729999983949333,.0741666650310881] (n = 1534) (mean = .1160365058670143)
Bin #38: (.0741666650310881,.0753333316672429] (n = 839) (mean = .1060786650774732)
Bin #39: (.0753333316672429,.0764999983033977] (n = 822) (mean = .1240875912408759)
Bin #40: (.0764999983033977,.0776666649395525] (n = 855) (mean = .1169590643274854)
Bin #41: (.0776666649395525,.0788333315757073] (n = 904) (mean = .1194690265486726)
Bin #42: (.0788333315757073,.0799999982118607] (n = 1882) (mean = .1121147715196599)
Bin #1: [.08,.0810416665673256] (n = 979) (mean = .0990806945863126)
Bin #2: (.0810416665673256,.0820833331346512] (n = 1099) (mean = .097361237488626)
Bin #3: (.0820833331346512,.0831249997019768] (n = 1110) (mean = .0945945945945946)
Bin #4: (.0831249997019768,.0841666662693024] (n = 1024) (mean = .1005859375)
Bin #5: (.0841666662693024,.085208332836628] (n = 1053) (mean = .1016144349477683)
Bin #6: (.085208332836628,.0862499994039536] (n = 1084) (mean = .0839483394833948)
Bin #7: (.0862499994039536,.0872916659712792] (n = 1167) (mean = .1036846615252785)
Bin #8: (.0872916659712792,.0883333325386048] (n = 1216) (mean = .0912828947368421)
Bin #9: (.0883333325386048,.0893749991059304] (n = 1270) (mean = .1)
Bin #10: (.0893749991059304,.090416665673256] (n = 1257) (mean = .0986475735879077)
Bin #11: (.090416665673256,.0914583322405816] (n = 1206) (mean = .0945273631840796)
Bin #12: (.0914583322405816,.0924999988079072] (n = 1265) (mean = .0996047430830039)
Bin #13: (.0924999988079072,.0935416653752328] (n = 1325) (mean = .100377358490566)
Bin #14: (.0935416653752328,.0945833319425584] (n = 1297) (mean = .1079414032382421)
Bin #15: (.0945833319425584,.095624998509884] (n = 1324) (mean = .1004531722054381)
Bin #16: (.095624998509884,.0966666650772096] (n = 1327) (mean = .0972117558402412)
Bin #17: (.0966666650772096,.0977083316445352] (n = 1325) (mean = .0867924528301887)
Bin #18: (.0977083316445352,.0987499982118608] (n = 1400) (mean = .1057142857142857)
Bin #19: (.0987499982118608,.0997916647791864] (n = 1439) (mean = .1021542738012509)
Bin #20: (.0997916647791864,.100833331346512] (n = 1388) (mean = .0965417867435159)
Bin #21: (.100833331346512,.1018749979138376] (n = 1466) (mean = .1084583901773533)
Bin #22: (.1018749979138376,.1029166644811632] (n = 1446) (mean = .1037344398340249)
Bin #23: (.1029166644811632,.1039583310484888] (n = 1479) (mean = .1041244083840433)
Bin #24: (.1039583310484888,.1049999976158144] (n = 2993) (mean = .1052455730036752)
Bin #25: (.1049999976158144,.10604166418314] (n = 1532) (mean = .0848563968668407)
Bin #26: (.10604166418314,.1070833307504656] (n = 1447) (mean = .0912232204561161)
Bin #27: (.1070833307504656,.1081249973177912] (n = 1506) (mean = .1049136786188579)
Bin #28: (.1081249973177912,.1091666638851168] (n = 1515) (mean = .1214521452145215)
Bin #29: (.1091666638851168,.1102083304524424] (n = 1510) (mean = .0920529801324503)
Bin #30: (.1102083304524424,.111249997019768] (n = 1564) (mean = .0978260869565217)
Bin #31: (.111249997019768,.1122916635870936] (n = 1564) (mean = .1010230179028133)
Bin #32: (.1122916635870936,.1133333301544192] (n = 1575) (mean = .093968253968254)
Bin #33: (.1133333301544192,.1143749967217448] (n = 1501) (mean = .1012658227848101)
Bin #34: (.1143749967217448,.1154166632890704] (n = 1620) (mean = .1203703703703704)
Bin #35: (.1154166632890704,.116458329856396] (n = 1578) (mean = .1197718631178707)
Bin #36: (.116458329856396,.1174999964237216] (n = 1519) (mean = .1138907175773535)
Bin #37: (.1174999964237216,.1185416629910472] (n = 1550) (mean = .112258064516129)
Bin #38: (.1185416629910472,.1195833295583728] (n = 1571) (mean = .1088478676002546)
Bin #39: (.1195833295583728,.1206249961256984] (n = 1564) (mean = .1170076726342711)
Bin #40: (.1206249961256984,.121666662693024] (n = 1666) (mean = .1002400960384154)
Bin #41: (.121666662693024,.1227083292603496] (n = 1584) (mean = .1212121212121212)
Bin #42: (.1227083292603496,.1237499958276752] (n = 1603) (mean = .0973175296319401)
Bin #43: (.1237499958276752,.1247916623950008] (n = 1622) (mean = .1091245376078915)
Bin #44: (.1247916623950008,.1258333289623264] (n = 1589) (mean = .1107614852108244)
Bin #45: (.1258333289623264,.126874995529652] (n = 1570) (mean = .1210191082802548)
Bin #46: (.126874995529652,.1279166620969776] (n = 1601) (mean = .1018113678950656)
Bin #47: (.1279166620969776,.1289583286643032] (n = 1609) (mean = .1155997513983841)
Bin #48: (.1289583286643032,.1299999952316284] (n = 1582) (mean = .1201011378002528)

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. cmogram recidivism bac1 if bac1>0.03 & bac1<0.13, cut(0.08) scatter line(0.08) qfitci

Plotting mean of recidivism, conditional on bac1.

n = 89967

Bin #1: [.0309999994933605,.0321666661295153] (n = 190) (mean = .0789473684210526)
Bin #2: (.0321666661295153,.0333333327656701] (n = 114) (mean = .1052631578947368)
Bin #3: (.0333333327656701,.0344999994018249] (n = 96) (mean = .09375)
Bin #4: (.0344999994018249,.0356666660379797] (n = 116) (mean = .0862068965517241)
Bin #5: (.0356666660379797,.0368333326741345] (n = 106) (mean = .1037735849056604)
Bin #6: (.0368333326741345,.0379999993102893] (n = 218) (mean = .1192660550458716)
Bin #7: (.0379999993102893,.0391666659464441] (n = 116) (mean = .103448275862069)
Bin #8: (.0391666659464441,.0403333325825989] (n = 111) (mean = .1081081081081081)
Bin #9: (.0403333325825989,.0414999992187537] (n = 135) (mean = .1407407407407407)
Bin #10: (.0414999992187537,.0426666658549085] (n = 145) (mean = .0896551724137931)
Bin #11: (.0426666658549085,.0438333324910633] (n = 152) (mean = .1381578947368421)
Bin #12: (.0438333324910633,.0449999991272181] (n = 145) (mean = .1310344827586207)
Bin #13: (.0449999991272181,.0461666657633729] (n = 309) (mean = .1488673139158576)
Bin #14: (.0461666657633729,.0473333323995277] (n = 165) (mean = .1090909090909091)
Bin #15: (.0473333323995277,.0484999990356825] (n = 200) (mean = .12)
Bin #16: (.0484999990356825,.0496666656718373] (n = 175) (mean = .1371428571428571)
Bin #17: (.0496666656718373,.0508333323079921] (n = 204) (mean = .1176470588235294)
Bin #18: (.0508333323079921,.0519999989441469] (n = 218) (mean = .1330275229357798)
Bin #19: (.0519999989441469,.0531666655803017] (n = 456) (mean = .1118421052631579)
Bin #20: (.0531666655803017,.0543333322164565] (n = 255) (mean = .1215686274509804)
Bin #21: (.0543333322164565,.0554999988526113] (n = 248) (mean = .1330645161290323)
Bin #22: (.0554999988526113,.0566666654887661] (n = 291) (mean = .0996563573883162)
Bin #23: (.0566666654887661,.0578333321249209] (n = 285) (mean = .1298245614035088)
Bin #24: (.0578333321249209,.0589999987610757] (n = 310) (mean = .1032258064516129)
Bin #25: (.0589999987610757,.0601666653972305] (n = 724) (mean = .1146408839779006)
Bin #26: (.0601666653972305,.0613333320333853] (n = 400) (mean = .1375)
Bin #27: (.0613333320333853,.0624999986695401] (n = 415) (mean = .1325301204819277)
Bin #28: (.0624999986695401,.0636666653056949] (n = 493) (mean = .101419878296146)
Bin #29: (.0636666653056949,.0648333319418497] (n = 472) (mean = .1059322033898305)
Bin #30: (.0648333319418497,.0659999985780045] (n = 463) (mean = .1274298056155508)
Bin #31: (.0659999985780045,.0671666652141593] (n = 1046) (mean = .132887189292543)
Bin #32: (.0671666652141593,.0683333318503141] (n = 586) (mean = .1040955631399317)
Bin #33: (.0683333318503141,.0694999984864689] (n = 638) (mean = .1253918495297806)
Bin #34: (.0694999984864689,.0706666651226237] (n = 638) (mean = .109717868338558)
Bin #35: (.0706666651226237,.0718333317587785] (n = 689) (mean = .1132075471698113)
Bin #36: (.0718333317587785,.0729999983949333] (n = 732) (mean = .116120218579235)
Bin #37: (.0729999983949333,.0741666650310881] (n = 1534) (mean = .1160365058670143)
Bin #38: (.0741666650310881,.0753333316672429] (n = 839) (mean = .1060786650774732)
Bin #39: (.0753333316672429,.0764999983033977] (n = 822) (mean = .1240875912408759)
Bin #40: (.0764999983033977,.0776666649395525] (n = 855) (mean = .1169590643274854)
Bin #41: (.0776666649395525,.0788333315757073] (n = 904) (mean = .1194690265486726)
Bin #42: (.0788333315757073,.0799999982118607] (n = 1882) (mean = .1121147715196599)
Bin #1: [.08,.0810416665673256] (n = 979) (mean = .0990806945863126)
Bin #2: (.0810416665673256,.0820833331346512] (n = 1099) (mean = .097361237488626)
Bin #3: (.0820833331346512,.0831249997019768] (n = 1110) (mean = .0945945945945946)
Bin #4: (.0831249997019768,.0841666662693024] (n = 1024) (mean = .1005859375)
Bin #5: (.0841666662693024,.085208332836628] (n = 1053) (mean = .1016144349477683)
Bin #6: (.085208332836628,.0862499994039536] (n = 1084) (mean = .0839483394833948)
Bin #7: (.0862499994039536,.0872916659712792] (n = 1167) (mean = .1036846615252785)
Bin #8: (.0872916659712792,.0883333325386048] (n = 1216) (mean = .0912828947368421)
Bin #9: (.0883333325386048,.0893749991059304] (n = 1270) (mean = .1)
Bin #10: (.0893749991059304,.090416665673256] (n = 1257) (mean = .0986475735879077)
Bin #11: (.090416665673256,.0914583322405816] (n = 1206) (mean = .0945273631840796)
Bin #12: (.0914583322405816,.0924999988079072] (n = 1265) (mean = .0996047430830039)
Bin #13: (.0924999988079072,.0935416653752328] (n = 1325) (mean = .100377358490566)
Bin #14: (.0935416653752328,.0945833319425584] (n = 1297) (mean = .1079414032382421)
Bin #15: (.0945833319425584,.095624998509884] (n = 1324) (mean = .1004531722054381)
Bin #16: (.095624998509884,.0966666650772096] (n = 1327) (mean = .0972117558402412)
Bin #17: (.0966666650772096,.0977083316445352] (n = 1325) (mean = .0867924528301887)
Bin #18: (.0977083316445352,.0987499982118608] (n = 1400) (mean = .1057142857142857)
Bin #19: (.0987499982118608,.0997916647791864] (n = 1439) (mean = .1021542738012509)
Bin #20: (.0997916647791864,.100833331346512] (n = 1388) (mean = .0965417867435159)
Bin #21: (.100833331346512,.1018749979138376] (n = 1466) (mean = .1084583901773533)
Bin #22: (.1018749979138376,.1029166644811632] (n = 1446) (mean = .1037344398340249)
Bin #23: (.1029166644811632,.1039583310484888] (n = 1479) (mean = .1041244083840433)
Bin #24: (.1039583310484888,.1049999976158144] (n = 2993) (mean = .1052455730036752)
Bin #25: (.1049999976158144,.10604166418314] (n = 1532) (mean = .0848563968668407)
Bin #26: (.10604166418314,.1070833307504656] (n = 1447) (mean = .0912232204561161)
Bin #27: (.1070833307504656,.1081249973177912] (n = 1506) (mean = .1049136786188579)
Bin #28: (.1081249973177912,.1091666638851168] (n = 1515) (mean = .1214521452145215)
Bin #29: (.1091666638851168,.1102083304524424] (n = 1510) (mean = .0920529801324503)
Bin #30: (.1102083304524424,.111249997019768] (n = 1564) (mean = .0978260869565217)
Bin #31: (.111249997019768,.1122916635870936] (n = 1564) (mean = .1010230179028133)
Bin #32: (.1122916635870936,.1133333301544192] (n = 1575) (mean = .093968253968254)
Bin #33: (.1133333301544192,.1143749967217448] (n = 1501) (mean = .1012658227848101)
Bin #34: (.1143749967217448,.1154166632890704] (n = 1620) (mean = .1203703703703704)
Bin #35: (.1154166632890704,.116458329856396] (n = 1578) (mean = .1197718631178707)
Bin #36: (.116458329856396,.1174999964237216] (n = 1519) (mean = .1138907175773535)
Bin #37: (.1174999964237216,.1185416629910472] (n = 1550) (mean = .112258064516129)
Bin #38: (.1185416629910472,.1195833295583728] (n = 1571) (mean = .1088478676002546)
Bin #39: (.1195833295583728,.1206249961256984] (n = 1564) (mean = .1170076726342711)
Bin #40: (.1206249961256984,.121666662693024] (n = 1666) (mean = .1002400960384154)
Bin #41: (.121666662693024,.1227083292603496] (n = 1584) (mean = .1212121212121212)
Bin #42: (.1227083292603496,.1237499958276752] (n = 1603) (mean = .0973175296319401)
Bin #43: (.1237499958276752,.1247916623950008] (n = 1622) (mean = .1091245376078915)
Bin #44: (.1247916623950008,.1258333289623264] (n = 1589) (mean = .1107614852108244)
Bin #45: (.1258333289623264,.126874995529652] (n = 1570) (mean = .1210191082802548)
Bin #46: (.126874995529652,.1279166620969776] (n = 1601) (mean = .1018113678950656)
Bin #47: (.1279166620969776,.1289583286643032] (n = 1609) (mean = .1155997513983841)
Bin #48: (.1289583286643032,.1299999952316284] (n = 1582) (mean = .1201011378002528)

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. cmogram recidivism bac1 if bac1>0.03 & bac1<0.13, cut(0.08) scatter line(0.08) 

Plotting mean of recidivism, conditional on bac1.

n = 89967

Bin #1: [.0309999994933605,.0321666661295153] (n = 190) (mean = .0789473684210526)
Bin #2: (.0321666661295153,.0333333327656701] (n = 114) (mean = .1052631578947368)
Bin #3: (.0333333327656701,.0344999994018249] (n = 96) (mean = .09375)
Bin #4: (.0344999994018249,.0356666660379797] (n = 116) (mean = .0862068965517241)
Bin #5: (.0356666660379797,.0368333326741345] (n = 106) (mean = .1037735849056604)
Bin #6: (.0368333326741345,.0379999993102893] (n = 218) (mean = .1192660550458716)
Bin #7: (.0379999993102893,.0391666659464441] (n = 116) (mean = .103448275862069)
Bin #8: (.0391666659464441,.0403333325825989] (n = 111) (mean = .1081081081081081)
Bin #9: (.0403333325825989,.0414999992187537] (n = 135) (mean = .1407407407407407)
Bin #10: (.0414999992187537,.0426666658549085] (n = 145) (mean = .0896551724137931)
Bin #11: (.0426666658549085,.0438333324910633] (n = 152) (mean = .1381578947368421)
Bin #12: (.0438333324910633,.0449999991272181] (n = 145) (mean = .1310344827586207)
Bin #13: (.0449999991272181,.0461666657633729] (n = 309) (mean = .1488673139158576)
Bin #14: (.0461666657633729,.0473333323995277] (n = 165) (mean = .1090909090909091)
Bin #15: (.0473333323995277,.0484999990356825] (n = 200) (mean = .12)
Bin #16: (.0484999990356825,.0496666656718373] (n = 175) (mean = .1371428571428571)
Bin #17: (.0496666656718373,.0508333323079921] (n = 204) (mean = .1176470588235294)
Bin #18: (.0508333323079921,.0519999989441469] (n = 218) (mean = .1330275229357798)
Bin #19: (.0519999989441469,.0531666655803017] (n = 456) (mean = .1118421052631579)
Bin #20: (.0531666655803017,.0543333322164565] (n = 255) (mean = .1215686274509804)
Bin #21: (.0543333322164565,.0554999988526113] (n = 248) (mean = .1330645161290323)
Bin #22: (.0554999988526113,.0566666654887661] (n = 291) (mean = .0996563573883162)
Bin #23: (.0566666654887661,.0578333321249209] (n = 285) (mean = .1298245614035088)
Bin #24: (.0578333321249209,.0589999987610757] (n = 310) (mean = .1032258064516129)
Bin #25: (.0589999987610757,.0601666653972305] (n = 724) (mean = .1146408839779006)
Bin #26: (.0601666653972305,.0613333320333853] (n = 400) (mean = .1375)
Bin #27: (.0613333320333853,.0624999986695401] (n = 415) (mean = .1325301204819277)
Bin #28: (.0624999986695401,.0636666653056949] (n = 493) (mean = .101419878296146)
Bin #29: (.0636666653056949,.0648333319418497] (n = 472) (mean = .1059322033898305)
Bin #30: (.0648333319418497,.0659999985780045] (n = 463) (mean = .1274298056155508)
Bin #31: (.0659999985780045,.0671666652141593] (n = 1046) (mean = .132887189292543)
Bin #32: (.0671666652141593,.0683333318503141] (n = 586) (mean = .1040955631399317)
Bin #33: (.0683333318503141,.0694999984864689] (n = 638) (mean = .1253918495297806)
Bin #34: (.0694999984864689,.0706666651226237] (n = 638) (mean = .109717868338558)
Bin #35: (.0706666651226237,.0718333317587785] (n = 689) (mean = .1132075471698113)
Bin #36: (.0718333317587785,.0729999983949333] (n = 732) (mean = .116120218579235)
Bin #37: (.0729999983949333,.0741666650310881] (n = 1534) (mean = .1160365058670143)
Bin #38: (.0741666650310881,.0753333316672429] (n = 839) (mean = .1060786650774732)
Bin #39: (.0753333316672429,.0764999983033977] (n = 822) (mean = .1240875912408759)
Bin #40: (.0764999983033977,.0776666649395525] (n = 855) (mean = .1169590643274854)
Bin #41: (.0776666649395525,.0788333315757073] (n = 904) (mean = .1194690265486726)
Bin #42: (.0788333315757073,.0799999982118607] (n = 1882) (mean = .1121147715196599)
Bin #1: [.08,.0810416665673256] (n = 979) (mean = .0990806945863126)
Bin #2: (.0810416665673256,.0820833331346512] (n = 1099) (mean = .097361237488626)
Bin #3: (.0820833331346512,.0831249997019768] (n = 1110) (mean = .0945945945945946)
Bin #4: (.0831249997019768,.0841666662693024] (n = 1024) (mean = .1005859375)
Bin #5: (.0841666662693024,.085208332836628] (n = 1053) (mean = .1016144349477683)
Bin #6: (.085208332836628,.0862499994039536] (n = 1084) (mean = .0839483394833948)
Bin #7: (.0862499994039536,.0872916659712792] (n = 1167) (mean = .1036846615252785)
Bin #8: (.0872916659712792,.0883333325386048] (n = 1216) (mean = .0912828947368421)
Bin #9: (.0883333325386048,.0893749991059304] (n = 1270) (mean = .1)
Bin #10: (.0893749991059304,.090416665673256] (n = 1257) (mean = .0986475735879077)
Bin #11: (.090416665673256,.0914583322405816] (n = 1206) (mean = .0945273631840796)
Bin #12: (.0914583322405816,.0924999988079072] (n = 1265) (mean = .0996047430830039)
Bin #13: (.0924999988079072,.0935416653752328] (n = 1325) (mean = .100377358490566)
Bin #14: (.0935416653752328,.0945833319425584] (n = 1297) (mean = .1079414032382421)
Bin #15: (.0945833319425584,.095624998509884] (n = 1324) (mean = .1004531722054381)
Bin #16: (.095624998509884,.0966666650772096] (n = 1327) (mean = .0972117558402412)
Bin #17: (.0966666650772096,.0977083316445352] (n = 1325) (mean = .0867924528301887)
Bin #18: (.0977083316445352,.0987499982118608] (n = 1400) (mean = .1057142857142857)
Bin #19: (.0987499982118608,.0997916647791864] (n = 1439) (mean = .1021542738012509)
Bin #20: (.0997916647791864,.100833331346512] (n = 1388) (mean = .0965417867435159)
Bin #21: (.100833331346512,.1018749979138376] (n = 1466) (mean = .1084583901773533)
Bin #22: (.1018749979138376,.1029166644811632] (n = 1446) (mean = .1037344398340249)
Bin #23: (.1029166644811632,.1039583310484888] (n = 1479) (mean = .1041244083840433)
Bin #24: (.1039583310484888,.1049999976158144] (n = 2993) (mean = .1052455730036752)
Bin #25: (.1049999976158144,.10604166418314] (n = 1532) (mean = .0848563968668407)
Bin #26: (.10604166418314,.1070833307504656] (n = 1447) (mean = .0912232204561161)
Bin #27: (.1070833307504656,.1081249973177912] (n = 1506) (mean = .1049136786188579)
Bin #28: (.1081249973177912,.1091666638851168] (n = 1515) (mean = .1214521452145215)
Bin #29: (.1091666638851168,.1102083304524424] (n = 1510) (mean = .0920529801324503)
Bin #30: (.1102083304524424,.111249997019768] (n = 1564) (mean = .0978260869565217)
Bin #31: (.111249997019768,.1122916635870936] (n = 1564) (mean = .1010230179028133)
Bin #32: (.1122916635870936,.1133333301544192] (n = 1575) (mean = .093968253968254)
Bin #33: (.1133333301544192,.1143749967217448] (n = 1501) (mean = .1012658227848101)
Bin #34: (.1143749967217448,.1154166632890704] (n = 1620) (mean = .1203703703703704)
Bin #35: (.1154166632890704,.116458329856396] (n = 1578) (mean = .1197718631178707)
Bin #36: (.116458329856396,.1174999964237216] (n = 1519) (mean = .1138907175773535)
Bin #37: (.1174999964237216,.1185416629910472] (n = 1550) (mean = .112258064516129)
Bin #38: (.1185416629910472,.1195833295583728] (n = 1571) (mean = .1088478676002546)
Bin #39: (.1195833295583728,.1206249961256984] (n = 1564) (mean = .1170076726342711)
Bin #40: (.1206249961256984,.121666662693024] (n = 1666) (mean = .1002400960384154)
Bin #41: (.121666662693024,.1227083292603496] (n = 1584) (mean = .1212121212121212)
Bin #42: (.1227083292603496,.1237499958276752] (n = 1603) (mean = .0973175296319401)
Bin #43: (.1237499958276752,.1247916623950008] (n = 1622) (mean = .1091245376078915)
Bin #44: (.1247916623950008,.1258333289623264] (n = 1589) (mean = .1107614852108244)
Bin #45: (.1258333289623264,.126874995529652] (n = 1570) (mean = .1210191082802548)
Bin #46: (.126874995529652,.1279166620969776] (n = 1601) (mean = .1018113678950656)
Bin #47: (.1279166620969776,.1289583286643032] (n = 1609) (mean = .1155997513983841)
Bin #48: (.1289583286643032,.1299999952316284] (n = 1582) (mean = .1201011378002528)

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. reg recidivism white male aged acc dui##c.bac1 if bac1>=0.055 & bac1<=0.105, robust

Linear regression                               Number of obs     =     46,957
                                                F(7, 46949)       =      29.17
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0040
                                                Root MSE          =     .30625

------------------------------------------------------------------------------
             |               Robust
  recidivism | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
       white |   .0175942   .0038129     4.61   0.000     .0101209    .0250675
        male |   .0357191   .0031666    11.28   0.000     .0295126    .0419256
        aged |  -.0007579   .0001154    -6.57   0.000     -.000984   -.0005318
         acc |   .0042208   .0049681     0.85   0.396    -.0055168    .0139584
       1.dui |  -.0643427   .0350143    -1.84   0.066    -.1329712    .0042858
        bac1 |  -.1955582   .3825057    -0.51   0.609    -.9452749    .5541586
             |
  dui#c.bac1 |
          1  |   .5470655   .4493585     1.22   0.223    -.3336838    1.427815
             |
       _cons |    .113252    .027755     4.08   0.000     .0588519    .1676522
------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. reg recidivism white male aged acc dui##c.(bac1 bac1_sq) if bac1>=0.055 & bac1<=0.105,, robust
invalid 'robust' 
r(198);

end of do-file

r(198);

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. reg recidivism white male aged acc dui##c.(bac1 bac1_sq) if bac1>=0.055 & bac1<=0.105, robust

Linear regression                               Number of obs     =     46,957
                                                F(9, 46947)       =      22.78
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0040
                                                Root MSE          =     .30626

-------------------------------------------------------------------------------
              |               Robust
   recidivism | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
--------------+----------------------------------------------------------------
        white |   .0175921   .0038126     4.61   0.000     .0101193    .0250649
         male |   .0357529   .0031666    11.29   0.000     .0295463    .0419596
         aged |  -.0007582   .0001154    -6.57   0.000    -.0009844    -.000532
          acc |   .0042334    .004968     0.85   0.394     -.005504    .0139709
        1.dui |   .3714376   .4220196     0.88   0.379    -.4557269    1.198602
         bac1 |   6.167044   8.119767     0.76   0.448    -9.747817    22.08191
      bac1_sq |  -46.06441    58.7465    -0.78   0.433    -161.2084    69.07958
              |
   dui#c.bac1 |
           1  |  -10.52059   10.60942    -0.99   0.321     -31.3152    10.27402
              |
dui#c.bac1_sq |
           1  |   71.26729   69.20719     1.03   0.303    -64.37981    206.9144
              |
        _cons |  -.1042393   .2782927    -0.37   0.708    -.6496971    .4412185
-------------------------------------------------------------------------------

. 
end of do-file

. de

Contains data from https://github.com/scunning1975/causal-inference-class/raw/master/hansen_dwi.dta
 Observations:       214,558                  
    Variables:            14                  27 Feb 2018 13:21
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Variable      Storage   Display    Value
    name         type    format    label      Variable label
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Date            long    %td                   
Alcohol1        int     %10.0g                
Alcohol2        int     %10.0g                
low_score       float   %9.0g                 
male            float   %9.0g                 
white           float   %9.0g                 
recidivism      float   %9.0g                 
acc             float   %9.0g                 
aged            float   %9.0g                 
year            float   %9.0g                 
bac1            float   %9.0g                 
bac2            float   %9.0g                 
dui             float   %9.0g                 
bac1_sq         float   %9.0g                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Sorted by: 
     Note: Dataset has changed since last saved.

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. cmogram recidivism bac1 if bac1>0.03 & bac1<0.13, cut(0.08) scatter line(0.08) 

Plotting mean of recidivism, conditional on bac1.

n = 89967

Bin #1: [.0309999994933605,.0321666661295153] (n = 190) (mean = .0789473684210526)
Bin #2: (.0321666661295153,.0333333327656701] (n = 114) (mean = .1052631578947368)
Bin #3: (.0333333327656701,.0344999994018249] (n = 96) (mean = .09375)
Bin #4: (.0344999994018249,.0356666660379797] (n = 116) (mean = .0862068965517241)
Bin #5: (.0356666660379797,.0368333326741345] (n = 106) (mean = .1037735849056604)
Bin #6: (.0368333326741345,.0379999993102893] (n = 218) (mean = .1192660550458716)
Bin #7: (.0379999993102893,.0391666659464441] (n = 116) (mean = .103448275862069)
Bin #8: (.0391666659464441,.0403333325825989] (n = 111) (mean = .1081081081081081)
Bin #9: (.0403333325825989,.0414999992187537] (n = 135) (mean = .1407407407407407)
Bin #10: (.0414999992187537,.0426666658549085] (n = 145) (mean = .0896551724137931)
Bin #11: (.0426666658549085,.0438333324910633] (n = 152) (mean = .1381578947368421)
Bin #12: (.0438333324910633,.0449999991272181] (n = 145) (mean = .1310344827586207)
Bin #13: (.0449999991272181,.0461666657633729] (n = 309) (mean = .1488673139158576)
Bin #14: (.0461666657633729,.0473333323995277] (n = 165) (mean = .1090909090909091)
Bin #15: (.0473333323995277,.0484999990356825] (n = 200) (mean = .12)
Bin #16: (.0484999990356825,.0496666656718373] (n = 175) (mean = .1371428571428571)
Bin #17: (.0496666656718373,.0508333323079921] (n = 204) (mean = .1176470588235294)
Bin #18: (.0508333323079921,.0519999989441469] (n = 218) (mean = .1330275229357798)
Bin #19: (.0519999989441469,.0531666655803017] (n = 456) (mean = .1118421052631579)
Bin #20: (.0531666655803017,.0543333322164565] (n = 255) (mean = .1215686274509804)
Bin #21: (.0543333322164565,.0554999988526113] (n = 248) (mean = .1330645161290323)
Bin #22: (.0554999988526113,.0566666654887661] (n = 291) (mean = .0996563573883162)
Bin #23: (.0566666654887661,.0578333321249209] (n = 285) (mean = .1298245614035088)
Bin #24: (.0578333321249209,.0589999987610757] (n = 310) (mean = .1032258064516129)
Bin #25: (.0589999987610757,.0601666653972305] (n = 724) (mean = .1146408839779006)
Bin #26: (.0601666653972305,.0613333320333853] (n = 400) (mean = .1375)
Bin #27: (.0613333320333853,.0624999986695401] (n = 415) (mean = .1325301204819277)
Bin #28: (.0624999986695401,.0636666653056949] (n = 493) (mean = .101419878296146)
Bin #29: (.0636666653056949,.0648333319418497] (n = 472) (mean = .1059322033898305)
Bin #30: (.0648333319418497,.0659999985780045] (n = 463) (mean = .1274298056155508)
Bin #31: (.0659999985780045,.0671666652141593] (n = 1046) (mean = .132887189292543)
Bin #32: (.0671666652141593,.0683333318503141] (n = 586) (mean = .1040955631399317)
Bin #33: (.0683333318503141,.0694999984864689] (n = 638) (mean = .1253918495297806)
Bin #34: (.0694999984864689,.0706666651226237] (n = 638) (mean = .109717868338558)
Bin #35: (.0706666651226237,.0718333317587785] (n = 689) (mean = .1132075471698113)
Bin #36: (.0718333317587785,.0729999983949333] (n = 732) (mean = .116120218579235)
Bin #37: (.0729999983949333,.0741666650310881] (n = 1534) (mean = .1160365058670143)
Bin #38: (.0741666650310881,.0753333316672429] (n = 839) (mean = .1060786650774732)
Bin #39: (.0753333316672429,.0764999983033977] (n = 822) (mean = .1240875912408759)
Bin #40: (.0764999983033977,.0776666649395525] (n = 855) (mean = .1169590643274854)
Bin #41: (.0776666649395525,.0788333315757073] (n = 904) (mean = .1194690265486726)
Bin #42: (.0788333315757073,.0799999982118607] (n = 1882) (mean = .1121147715196599)
Bin #1: [.08,.0810416665673256] (n = 979) (mean = .0990806945863126)
Bin #2: (.0810416665673256,.0820833331346512] (n = 1099) (mean = .097361237488626)
Bin #3: (.0820833331346512,.0831249997019768] (n = 1110) (mean = .0945945945945946)
Bin #4: (.0831249997019768,.0841666662693024] (n = 1024) (mean = .1005859375)
Bin #5: (.0841666662693024,.085208332836628] (n = 1053) (mean = .1016144349477683)
Bin #6: (.085208332836628,.0862499994039536] (n = 1084) (mean = .0839483394833948)
Bin #7: (.0862499994039536,.0872916659712792] (n = 1167) (mean = .1036846615252785)
Bin #8: (.0872916659712792,.0883333325386048] (n = 1216) (mean = .0912828947368421)
Bin #9: (.0883333325386048,.0893749991059304] (n = 1270) (mean = .1)
Bin #10: (.0893749991059304,.090416665673256] (n = 1257) (mean = .0986475735879077)
Bin #11: (.090416665673256,.0914583322405816] (n = 1206) (mean = .0945273631840796)
Bin #12: (.0914583322405816,.0924999988079072] (n = 1265) (mean = .0996047430830039)
Bin #13: (.0924999988079072,.0935416653752328] (n = 1325) (mean = .100377358490566)
Bin #14: (.0935416653752328,.0945833319425584] (n = 1297) (mean = .1079414032382421)
Bin #15: (.0945833319425584,.095624998509884] (n = 1324) (mean = .1004531722054381)
Bin #16: (.095624998509884,.0966666650772096] (n = 1327) (mean = .0972117558402412)
Bin #17: (.0966666650772096,.0977083316445352] (n = 1325) (mean = .0867924528301887)
Bin #18: (.0977083316445352,.0987499982118608] (n = 1400) (mean = .1057142857142857)
Bin #19: (.0987499982118608,.0997916647791864] (n = 1439) (mean = .1021542738012509)
Bin #20: (.0997916647791864,.100833331346512] (n = 1388) (mean = .0965417867435159)
Bin #21: (.100833331346512,.1018749979138376] (n = 1466) (mean = .1084583901773533)
Bin #22: (.1018749979138376,.1029166644811632] (n = 1446) (mean = .1037344398340249)
Bin #23: (.1029166644811632,.1039583310484888] (n = 1479) (mean = .1041244083840433)
Bin #24: (.1039583310484888,.1049999976158144] (n = 2993) (mean = .1052455730036752)
Bin #25: (.1049999976158144,.10604166418314] (n = 1532) (mean = .0848563968668407)
Bin #26: (.10604166418314,.1070833307504656] (n = 1447) (mean = .0912232204561161)
Bin #27: (.1070833307504656,.1081249973177912] (n = 1506) (mean = .1049136786188579)
Bin #28: (.1081249973177912,.1091666638851168] (n = 1515) (mean = .1214521452145215)
Bin #29: (.1091666638851168,.1102083304524424] (n = 1510) (mean = .0920529801324503)
Bin #30: (.1102083304524424,.111249997019768] (n = 1564) (mean = .0978260869565217)
Bin #31: (.111249997019768,.1122916635870936] (n = 1564) (mean = .1010230179028133)
Bin #32: (.1122916635870936,.1133333301544192] (n = 1575) (mean = .093968253968254)
Bin #33: (.1133333301544192,.1143749967217448] (n = 1501) (mean = .1012658227848101)
Bin #34: (.1143749967217448,.1154166632890704] (n = 1620) (mean = .1203703703703704)
Bin #35: (.1154166632890704,.116458329856396] (n = 1578) (mean = .1197718631178707)
Bin #36: (.116458329856396,.1174999964237216] (n = 1519) (mean = .1138907175773535)
Bin #37: (.1174999964237216,.1185416629910472] (n = 1550) (mean = .112258064516129)
Bin #38: (.1185416629910472,.1195833295583728] (n = 1571) (mean = .1088478676002546)
Bin #39: (.1195833295583728,.1206249961256984] (n = 1564) (mean = .1170076726342711)
Bin #40: (.1206249961256984,.121666662693024] (n = 1666) (mean = .1002400960384154)
Bin #41: (.121666662693024,.1227083292603496] (n = 1584) (mean = .1212121212121212)
Bin #42: (.1227083292603496,.1237499958276752] (n = 1603) (mean = .0973175296319401)
Bin #43: (.1237499958276752,.1247916623950008] (n = 1622) (mean = .1091245376078915)
Bin #44: (.1247916623950008,.1258333289623264] (n = 1589) (mean = .1107614852108244)
Bin #45: (.1258333289623264,.126874995529652] (n = 1570) (mean = .1210191082802548)
Bin #46: (.126874995529652,.1279166620969776] (n = 1601) (mean = .1018113678950656)
Bin #47: (.1279166620969776,.1289583286643032] (n = 1609) (mean = .1155997513983841)
Bin #48: (.1289583286643032,.1299999952316284] (n = 1582) (mean = .1201011378002528)

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. reg recidivism white male aged acc dui##c.bac1 if bac1>=0.03 & bac1<=0.13 & donut==0, robust
donut not found
r(111);

end of do-file

r(111);

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. gen     donut = 0

. replace donut = 1 if bac1==0.08
(0 real changes made)

. 
end of do-file

. drop donut

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. gen     donut = 0

. replace donut = 1 if bac1>=0.079 & bac1<=0.81
(193,430 real changes made)

. 
end of do-file

. count if donut==1
  193,430

. count
  214,558

. drop donut

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. gen     donut = 0

. replace donut = 1 if bac1>=0.079 & bac1<=0.081
(1,882 real changes made)

. 
end of do-file

. count if donut==1
  1,882

. count
  214,558

. di 1882/214558
.00877152

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. reg recidivism white male aged acc dui##c.bac1 if bac1>=0.03 & bac1<=0.13, robust

Linear regression                               Number of obs     =     89,967
                                                F(7, 89959)       =      51.13
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0036
                                                Root MSE          =     .30849

------------------------------------------------------------------------------
             |               Robust
  recidivism | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
       white |   .0162238   .0028024     5.79   0.000     .0107311    .0217166
        male |   .0331803   .0023289    14.25   0.000     .0286157    .0377449
        aged |  -.0008537    .000085   -10.05   0.000    -.0010203   -.0006872
         acc |   .0042096    .003452     1.22   0.223    -.0025562    .0109754
       1.dui |  -.0590663   .0152111    -3.88   0.000    -.0888798   -.0292528
        bac1 |  -.0428678   .1866322    -0.23   0.818    -.4086651    .3229296
             |
  dui#c.bac1 |
          1  |   .4380899   .2037978     2.15   0.032     .0386482    .8375316
             |
       _cons |   .1093521    .013144     8.32   0.000     .0835899    .1351142
------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. histogram bac1, width(0.001) ytitle(Frequency) xtitle(Blood Alcohol Content) xline(0.08) title(Replicating Figure 1 of Hansen AER 2015) subtitle(Density of stops for DUI ac
> ross BAC) note(Continuous histogram)
(bin=450, start=0, width=.001)

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. reg recidivism white male aged acc dui##c.bac1 if bac1>=0.03 & bac1<=0.13 & donut==0, robust

Linear regression                               Number of obs     =     88,085
                                                F(7, 88077)       =      49.75
                                                Prob > F          =     0.0000
                                                R-squared         =     0.0036
                                                Root MSE          =     .30835

------------------------------------------------------------------------------
             |               Robust
  recidivism | Coefficient  std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
       white |   .0163368   .0028301     5.77   0.000     .0107898    .0218838
        male |   .0323997   .0023577    13.74   0.000     .0277785    .0370208
        aged |  -.0008779   .0000856   -10.26   0.000    -.0010457   -.0007102
         acc |   .0039893   .0034807     1.15   0.252    -.0028329    .0108115
       1.dui |   -.055725   .0157812    -3.53   0.000    -.0866559    -.024794
        bac1 |   .0199108   .2020923     0.10   0.922    -.3761882    .4160098
             |
  dui#c.bac1 |
          1  |   .3757179   .2180423     1.72   0.085     -.051643    .8030788
             |
       _cons |   .1073351   .0137933     7.78   0.000     .0803004    .1343699
------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. rdrobust recidivism bac1, kernel(triangular) masspoints(off) p(2) c(0.08)

Sharp RD estimates using local polynomial regression.

    Cutoff c = .08 | Left of c  Right of c            Number of obs =     214558
-------------------+----------------------            BW type       =      mserd
     Number of obs |     23010      191548            Kernel        = Triangular
Eff. Number of obs |     16574       41013            VCE method    =         NN
    Order est. (p) |         2           2
    Order bias (q) |         3           3
       BW est. (h) |     0.032       0.032
       BW bias (b) |     0.045       0.045
         rho (h/b) |     0.715       0.715

Outcome: recidivism. Running variable: bac1.
--------------------------------------------------------------------------------
            Method |   Coef.    Std. Err.    z     P>|z|    [95% Conf. Interval]
-------------------+------------------------------------------------------------
      Conventional | -.01722     .00807   -2.1337  0.033   -.033035     -.001402
            Robust |     -          -     -1.9312  0.053    -.03532      .000261
--------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. rdrobust recidivism bac1 & donut==0, kernel(triangular) masspoints(off) p(2) c(0.08)

Sharp RD estimates using local polynomial regression.

    Cutoff c = .08 | Left of c  Right of c            Number of obs =     214558
-------------------+----------------------            BW type       =      mserd
     Number of obs |     23010      191548            Kernel        = Triangular
Eff. Number of obs |     16574       41013            VCE method    =         NN
    Order est. (p) |         2           2
    Order bias (q) |         3           3
       BW est. (h) |     0.032       0.032
       BW bias (b) |     0.045       0.045
         rho (h/b) |     0.715       0.715

Outcome: recidivism. Running variable: bac1.
--------------------------------------------------------------------------------
            Method |   Coef.    Std. Err.    z     P>|z|    [95% Conf. Interval]
-------------------+------------------------------------------------------------
      Conventional | -.01722     .00807   -2.1337  0.033   -.033035     -.001402
            Robust |     -          -     -1.9312  0.053    -.03532      .000261
--------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. rdrobust recidivism bac1 if donut==0, kernel(triangular) masspoints(off) p(2) c(0.08)

Sharp RD estimates using local polynomial regression.

    Cutoff c = .08 | Left of c  Right of c            Number of obs =     212676
-------------------+----------------------            BW type       =      mserd
     Number of obs |     21128      191548            Kernel        = Triangular
Eff. Number of obs |     12560       27467            VCE method    =         NN
    Order est. (p) |         2           2
    Order bias (q) |         3           3
       BW est. (h) |     0.023       0.023
       BW bias (b) |     0.039       0.039
         rho (h/b) |     0.589       0.589

Outcome: recidivism. Running variable: bac1.
--------------------------------------------------------------------------------
            Method |   Coef.    Std. Err.    z     P>|z|    [95% Conf. Interval]
-------------------+------------------------------------------------------------
      Conventional | -.02094     .01298   -1.6127  0.107   -.046379      .004508
            Robust |     -          -     -1.4418  0.149   -.049924      .007604
--------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. cmogram recidivism bac1 if bac1>0.03 & bac1<0.13 & donut==0, cut(0.08) scatter line(0.08) 

Plotting mean of recidivism, conditional on bac1.

n = 88085

Bin #1: [.0309999994933605,.0321190471627882] (n = 190) (mean = .0789473684210526)
Bin #2: (.0321190471627882,.0332380948322159] (n = 114) (mean = .1052631578947368)
Bin #3: (.0332380948322159,.0343571425016436] (n = 96) (mean = .09375)
Bin #4: (.0343571425016436,.0354761901710713] (n = 116) (mean = .0862068965517241)
Bin #5: (.0354761901710713,.036595237840499] (n = 106) (mean = .1037735849056604)
Bin #6: (.036595237840499,.0377142855099267] (n = 116) (mean = .103448275862069)
Bin #7: (.0377142855099267,.0388333331793544] (n = 102) (mean = .1372549019607843)
Bin #8: (.0388333331793544,.0399523808487821] (n = 116) (mean = .103448275862069)
Bin #9: (.0399523808487821,.0410714285182098] (n = 246) (mean = .1260162601626016)
Bin #10: (.0410714285182098,.0421904761876375] (n = 145) (mean = .0896551724137931)
Bin #11: (.0421904761876375,.0433095238570652] (n = 152) (mean = .1381578947368421)
Bin #12: (.0433095238570652,.0444285715264929] (n = 145) (mean = .1310344827586207)
Bin #13: (.0444285715264929,.0455476191959206] (n = 144) (mean = .125)
Bin #14: (.0455476191959206,.0466666668653483] (n = 165) (mean = .1696969696969697)
Bin #15: (.0466666668653483,.047785714534776] (n = 165) (mean = .1090909090909091)
Bin #16: (.047785714534776,.0489047622042037] (n = 200) (mean = .12)
Bin #17: (.0489047622042037,.0500238098736314] (n = 379) (mean = .1266490765171504)
Bin #18: (.0500238098736314,.0511428575430591] (n = 218) (mean = .1330275229357798)
Bin #19: (.0511428575430591,.0522619052124868] (n = 234) (mean = .1068376068376068)
Bin #20: (.0522619052124868,.0533809528819145] (n = 222) (mean = .1171171171171171)
Bin #21: (.0533809528819145,.0545000005513422] (n = 255) (mean = .1215686274509804)
Bin #22: (.0545000005513422,.0556190482207699] (n = 248) (mean = .1330645161290323)
Bin #23: (.0556190482207699,.0567380958901976] (n = 291) (mean = .0996563573883162)
Bin #24: (.0567380958901976,.0578571435596253] (n = 285) (mean = .1298245614035088)
Bin #25: (.0578571435596253,.058976191229053] (n = 310) (mean = .1032258064516129)
Bin #26: (.058976191229053,.0600952388984807] (n = 724) (mean = .1146408839779006)
Bin #27: (.0600952388984807,.0612142865679084] (n = 400) (mean = .1375)
Bin #28: (.0612142865679084,.0623333342373361] (n = 415) (mean = .1325301204819277)
Bin #29: (.0623333342373361,.0634523819067638] (n = 493) (mean = .101419878296146)
Bin #30: (.0634523819067638,.0645714295761915] (n = 472) (mean = .1059322033898305)
Bin #31: (.0645714295761915,.0656904772456192] (n = 463) (mean = .1274298056155508)
Bin #32: (.0656904772456192,.0668095249150469] (n = 508) (mean = .1181102362204724)
Bin #33: (.0668095249150469,.0679285725844746] (n = 538) (mean = .1468401486988848)
Bin #34: (.0679285725844746,.0690476202539023] (n = 1224) (mean = .1151960784313725)
Bin #35: (.0690476202539023,.07016666792333] (n = 638) (mean = .109717868338558)
Bin #36: (.07016666792333,.0712857155927577] (n = 689) (mean = .1132075471698113)
Bin #37: (.0712857155927577,.0724047632621854] (n = 732) (mean = .116120218579235)
Bin #38: (.0724047632621854,.0735238109316131] (n = 782) (mean = .1240409207161125)
Bin #39: (.0735238109316131,.0746428586010408] (n = 752) (mean = .1077127659574468)
Bin #40: (.0746428586010408,.0757619062704685] (n = 839) (mean = .1060786650774732)
Bin #41: (.0757619062704685,.0768809539398962] (n = 822) (mean = .1240875912408759)
Bin #42: (.0768809539398962,.0780000016093254] (n = 855) (mean = .1169590643274854)
Bin #1: [.08,.0810416665673256] (n = 979) (mean = .0990806945863126)
Bin #2: (.0810416665673256,.0820833331346512] (n = 1099) (mean = .097361237488626)
Bin #3: (.0820833331346512,.0831249997019768] (n = 1110) (mean = .0945945945945946)
Bin #4: (.0831249997019768,.0841666662693024] (n = 1024) (mean = .1005859375)
Bin #5: (.0841666662693024,.085208332836628] (n = 1053) (mean = .1016144349477683)
Bin #6: (.085208332836628,.0862499994039536] (n = 1084) (mean = .0839483394833948)
Bin #7: (.0862499994039536,.0872916659712792] (n = 1167) (mean = .1036846615252785)
Bin #8: (.0872916659712792,.0883333325386048] (n = 1216) (mean = .0912828947368421)
Bin #9: (.0883333325386048,.0893749991059304] (n = 1270) (mean = .1)
Bin #10: (.0893749991059304,.090416665673256] (n = 1257) (mean = .0986475735879077)
Bin #11: (.090416665673256,.0914583322405816] (n = 1206) (mean = .0945273631840796)
Bin #12: (.0914583322405816,.0924999988079072] (n = 1265) (mean = .0996047430830039)
Bin #13: (.0924999988079072,.0935416653752328] (n = 1325) (mean = .100377358490566)
Bin #14: (.0935416653752328,.0945833319425584] (n = 1297) (mean = .1079414032382421)
Bin #15: (.0945833319425584,.095624998509884] (n = 1324) (mean = .1004531722054381)
Bin #16: (.095624998509884,.0966666650772096] (n = 1327) (mean = .0972117558402412)
Bin #17: (.0966666650772096,.0977083316445352] (n = 1325) (mean = .0867924528301887)
Bin #18: (.0977083316445352,.0987499982118608] (n = 1400) (mean = .1057142857142857)
Bin #19: (.0987499982118608,.0997916647791864] (n = 1439) (mean = .1021542738012509)
Bin #20: (.0997916647791864,.100833331346512] (n = 1388) (mean = .0965417867435159)
Bin #21: (.100833331346512,.1018749979138376] (n = 1466) (mean = .1084583901773533)
Bin #22: (.1018749979138376,.1029166644811632] (n = 1446) (mean = .1037344398340249)
Bin #23: (.1029166644811632,.1039583310484888] (n = 1479) (mean = .1041244083840433)
Bin #24: (.1039583310484888,.1049999976158144] (n = 2993) (mean = .1052455730036752)
Bin #25: (.1049999976158144,.10604166418314] (n = 1532) (mean = .0848563968668407)
Bin #26: (.10604166418314,.1070833307504656] (n = 1447) (mean = .0912232204561161)
Bin #27: (.1070833307504656,.1081249973177912] (n = 1506) (mean = .1049136786188579)
Bin #28: (.1081249973177912,.1091666638851168] (n = 1515) (mean = .1214521452145215)
Bin #29: (.1091666638851168,.1102083304524424] (n = 1510) (mean = .0920529801324503)
Bin #30: (.1102083304524424,.111249997019768] (n = 1564) (mean = .0978260869565217)
Bin #31: (.111249997019768,.1122916635870936] (n = 1564) (mean = .1010230179028133)
Bin #32: (.1122916635870936,.1133333301544192] (n = 1575) (mean = .093968253968254)
Bin #33: (.1133333301544192,.1143749967217448] (n = 1501) (mean = .1012658227848101)
Bin #34: (.1143749967217448,.1154166632890704] (n = 1620) (mean = .1203703703703704)
Bin #35: (.1154166632890704,.116458329856396] (n = 1578) (mean = .1197718631178707)
Bin #36: (.116458329856396,.1174999964237216] (n = 1519) (mean = .1138907175773535)
Bin #37: (.1174999964237216,.1185416629910472] (n = 1550) (mean = .112258064516129)
Bin #38: (.1185416629910472,.1195833295583728] (n = 1571) (mean = .1088478676002546)
Bin #39: (.1195833295583728,.1206249961256984] (n = 1564) (mean = .1170076726342711)
Bin #40: (.1206249961256984,.121666662693024] (n = 1666) (mean = .1002400960384154)
Bin #41: (.121666662693024,.1227083292603496] (n = 1584) (mean = .1212121212121212)
Bin #42: (.1227083292603496,.1237499958276752] (n = 1603) (mean = .0973175296319401)
Bin #43: (.1237499958276752,.1247916623950008] (n = 1622) (mean = .1091245376078915)
Bin #44: (.1247916623950008,.1258333289623264] (n = 1589) (mean = .1107614852108244)
Bin #45: (.1258333289623264,.126874995529652] (n = 1570) (mean = .1210191082802548)
Bin #46: (.126874995529652,.1279166620969776] (n = 1601) (mean = .1018113678950656)
Bin #47: (.1279166620969776,.1289583286643032] (n = 1609) (mean = .1155997513983841)
Bin #48: (.1289583286643032,.1299999952316284] (n = 1582) (mean = .1201011378002528)

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. cmogram recidivism bac1 if bac1>0.03 & bac1<0.13 & donut==0, cut(0.08) scatter line(0.08) lfitci

Plotting mean of recidivism, conditional on bac1.

n = 88085

Bin #1: [.0309999994933605,.0321190471627882] (n = 190) (mean = .0789473684210526)
Bin #2: (.0321190471627882,.0332380948322159] (n = 114) (mean = .1052631578947368)
Bin #3: (.0332380948322159,.0343571425016436] (n = 96) (mean = .09375)
Bin #4: (.0343571425016436,.0354761901710713] (n = 116) (mean = .0862068965517241)
Bin #5: (.0354761901710713,.036595237840499] (n = 106) (mean = .1037735849056604)
Bin #6: (.036595237840499,.0377142855099267] (n = 116) (mean = .103448275862069)
Bin #7: (.0377142855099267,.0388333331793544] (n = 102) (mean = .1372549019607843)
Bin #8: (.0388333331793544,.0399523808487821] (n = 116) (mean = .103448275862069)
Bin #9: (.0399523808487821,.0410714285182098] (n = 246) (mean = .1260162601626016)
Bin #10: (.0410714285182098,.0421904761876375] (n = 145) (mean = .0896551724137931)
Bin #11: (.0421904761876375,.0433095238570652] (n = 152) (mean = .1381578947368421)
Bin #12: (.0433095238570652,.0444285715264929] (n = 145) (mean = .1310344827586207)
Bin #13: (.0444285715264929,.0455476191959206] (n = 144) (mean = .125)
Bin #14: (.0455476191959206,.0466666668653483] (n = 165) (mean = .1696969696969697)
Bin #15: (.0466666668653483,.047785714534776] (n = 165) (mean = .1090909090909091)
Bin #16: (.047785714534776,.0489047622042037] (n = 200) (mean = .12)
Bin #17: (.0489047622042037,.0500238098736314] (n = 379) (mean = .1266490765171504)
Bin #18: (.0500238098736314,.0511428575430591] (n = 218) (mean = .1330275229357798)
Bin #19: (.0511428575430591,.0522619052124868] (n = 234) (mean = .1068376068376068)
Bin #20: (.0522619052124868,.0533809528819145] (n = 222) (mean = .1171171171171171)
Bin #21: (.0533809528819145,.0545000005513422] (n = 255) (mean = .1215686274509804)
Bin #22: (.0545000005513422,.0556190482207699] (n = 248) (mean = .1330645161290323)
Bin #23: (.0556190482207699,.0567380958901976] (n = 291) (mean = .0996563573883162)
Bin #24: (.0567380958901976,.0578571435596253] (n = 285) (mean = .1298245614035088)
Bin #25: (.0578571435596253,.058976191229053] (n = 310) (mean = .1032258064516129)
Bin #26: (.058976191229053,.0600952388984807] (n = 724) (mean = .1146408839779006)
Bin #27: (.0600952388984807,.0612142865679084] (n = 400) (mean = .1375)
Bin #28: (.0612142865679084,.0623333342373361] (n = 415) (mean = .1325301204819277)
Bin #29: (.0623333342373361,.0634523819067638] (n = 493) (mean = .101419878296146)
Bin #30: (.0634523819067638,.0645714295761915] (n = 472) (mean = .1059322033898305)
Bin #31: (.0645714295761915,.0656904772456192] (n = 463) (mean = .1274298056155508)
Bin #32: (.0656904772456192,.0668095249150469] (n = 508) (mean = .1181102362204724)
Bin #33: (.0668095249150469,.0679285725844746] (n = 538) (mean = .1468401486988848)
Bin #34: (.0679285725844746,.0690476202539023] (n = 1224) (mean = .1151960784313725)
Bin #35: (.0690476202539023,.07016666792333] (n = 638) (mean = .109717868338558)
Bin #36: (.07016666792333,.0712857155927577] (n = 689) (mean = .1132075471698113)
Bin #37: (.0712857155927577,.0724047632621854] (n = 732) (mean = .116120218579235)
Bin #38: (.0724047632621854,.0735238109316131] (n = 782) (mean = .1240409207161125)
Bin #39: (.0735238109316131,.0746428586010408] (n = 752) (mean = .1077127659574468)
Bin #40: (.0746428586010408,.0757619062704685] (n = 839) (mean = .1060786650774732)
Bin #41: (.0757619062704685,.0768809539398962] (n = 822) (mean = .1240875912408759)
Bin #42: (.0768809539398962,.0780000016093254] (n = 855) (mean = .1169590643274854)
Bin #1: [.08,.0810416665673256] (n = 979) (mean = .0990806945863126)
Bin #2: (.0810416665673256,.0820833331346512] (n = 1099) (mean = .097361237488626)
Bin #3: (.0820833331346512,.0831249997019768] (n = 1110) (mean = .0945945945945946)
Bin #4: (.0831249997019768,.0841666662693024] (n = 1024) (mean = .1005859375)
Bin #5: (.0841666662693024,.085208332836628] (n = 1053) (mean = .1016144349477683)
Bin #6: (.085208332836628,.0862499994039536] (n = 1084) (mean = .0839483394833948)
Bin #7: (.0862499994039536,.0872916659712792] (n = 1167) (mean = .1036846615252785)
Bin #8: (.0872916659712792,.0883333325386048] (n = 1216) (mean = .0912828947368421)
Bin #9: (.0883333325386048,.0893749991059304] (n = 1270) (mean = .1)
Bin #10: (.0893749991059304,.090416665673256] (n = 1257) (mean = .0986475735879077)
Bin #11: (.090416665673256,.0914583322405816] (n = 1206) (mean = .0945273631840796)
Bin #12: (.0914583322405816,.0924999988079072] (n = 1265) (mean = .0996047430830039)
Bin #13: (.0924999988079072,.0935416653752328] (n = 1325) (mean = .100377358490566)
Bin #14: (.0935416653752328,.0945833319425584] (n = 1297) (mean = .1079414032382421)
Bin #15: (.0945833319425584,.095624998509884] (n = 1324) (mean = .1004531722054381)
Bin #16: (.095624998509884,.0966666650772096] (n = 1327) (mean = .0972117558402412)
Bin #17: (.0966666650772096,.0977083316445352] (n = 1325) (mean = .0867924528301887)
Bin #18: (.0977083316445352,.0987499982118608] (n = 1400) (mean = .1057142857142857)
Bin #19: (.0987499982118608,.0997916647791864] (n = 1439) (mean = .1021542738012509)
Bin #20: (.0997916647791864,.100833331346512] (n = 1388) (mean = .0965417867435159)
Bin #21: (.100833331346512,.1018749979138376] (n = 1466) (mean = .1084583901773533)
Bin #22: (.1018749979138376,.1029166644811632] (n = 1446) (mean = .1037344398340249)
Bin #23: (.1029166644811632,.1039583310484888] (n = 1479) (mean = .1041244083840433)
Bin #24: (.1039583310484888,.1049999976158144] (n = 2993) (mean = .1052455730036752)
Bin #25: (.1049999976158144,.10604166418314] (n = 1532) (mean = .0848563968668407)
Bin #26: (.10604166418314,.1070833307504656] (n = 1447) (mean = .0912232204561161)
Bin #27: (.1070833307504656,.1081249973177912] (n = 1506) (mean = .1049136786188579)
Bin #28: (.1081249973177912,.1091666638851168] (n = 1515) (mean = .1214521452145215)
Bin #29: (.1091666638851168,.1102083304524424] (n = 1510) (mean = .0920529801324503)
Bin #30: (.1102083304524424,.111249997019768] (n = 1564) (mean = .0978260869565217)
Bin #31: (.111249997019768,.1122916635870936] (n = 1564) (mean = .1010230179028133)
Bin #32: (.1122916635870936,.1133333301544192] (n = 1575) (mean = .093968253968254)
Bin #33: (.1133333301544192,.1143749967217448] (n = 1501) (mean = .1012658227848101)
Bin #34: (.1143749967217448,.1154166632890704] (n = 1620) (mean = .1203703703703704)
Bin #35: (.1154166632890704,.116458329856396] (n = 1578) (mean = .1197718631178707)
Bin #36: (.116458329856396,.1174999964237216] (n = 1519) (mean = .1138907175773535)
Bin #37: (.1174999964237216,.1185416629910472] (n = 1550) (mean = .112258064516129)
Bin #38: (.1185416629910472,.1195833295583728] (n = 1571) (mean = .1088478676002546)
Bin #39: (.1195833295583728,.1206249961256984] (n = 1564) (mean = .1170076726342711)
Bin #40: (.1206249961256984,.121666662693024] (n = 1666) (mean = .1002400960384154)
Bin #41: (.121666662693024,.1227083292603496] (n = 1584) (mean = .1212121212121212)
Bin #42: (.1227083292603496,.1237499958276752] (n = 1603) (mean = .0973175296319401)
Bin #43: (.1237499958276752,.1247916623950008] (n = 1622) (mean = .1091245376078915)
Bin #44: (.1247916623950008,.1258333289623264] (n = 1589) (mean = .1107614852108244)
Bin #45: (.1258333289623264,.126874995529652] (n = 1570) (mean = .1210191082802548)
Bin #46: (.126874995529652,.1279166620969776] (n = 1601) (mean = .1018113678950656)
Bin #47: (.1279166620969776,.1289583286643032] (n = 1609) (mean = .1155997513983841)
Bin #48: (.1289583286643032,.1299999952316284] (n = 1582) (mean = .1201011378002528)

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. cmogram recidivism bac1 if bac1>0.055 & bac1<0.105 & donut==0, cut(0.08) scatter line(0.08) lfitci

Plotting mean of recidivism, conditional on bac1.

n = 45075

Bin #1: [.0560000017285347,.0565365870914808] (n = 291) (mean = .0996563573883162)
Bin #2: (.0565365870914808,.0570731724544269] (n = 285) (mean = .1298245614035088)
Bin #3: (.0570731724544269,.057609757817373] (n = 0) (mean = .)
Bin #4: (.057609757817373,.0581463431803191] (n = 310) (mean = .1032258064516129)
Bin #5: (.0581463431803191,.0586829285432652] (n = 0) (mean = .)
Bin #6: (.0586829285432652,.0592195139062113] (n = 338) (mean = .1124260355029586)
Bin #7: (.0592195139062113,.0597560992691574] (n = 0) (mean = .)
Bin #8: (.0597560992691574,.0602926846321035] (n = 386) (mean = .116580310880829)
Bin #9: (.0602926846321035,.0608292699950496] (n = 0) (mean = .)
Bin #10: (.0608292699950496,.0613658553579957] (n = 400) (mean = .1375)
Bin #11: (.0613658553579957,.0619024407209418] (n = 0) (mean = .)
Bin #12: (.0619024407209418,.0624390260838879] (n = 415) (mean = .1325301204819277)
Bin #13: (.0624390260838879,.062975611446834] (n = 0) (mean = .)
Bin #14: (.062975611446834,.0635121968097801] (n = 493) (mean = .101419878296146)
Bin #15: (.0635121968097801,.0640487821727262] (n = 472) (mean = .1059322033898305)
Bin #16: (.0640487821727262,.0645853675356723] (n = 0) (mean = .)
Bin #17: (.0645853675356723,.0651219528986184] (n = 463) (mean = .1274298056155508)
Bin #18: (.0651219528986184,.0656585382615645] (n = 0) (mean = .)
Bin #19: (.0656585382615645,.0661951236245106] (n = 508) (mean = .1181102362204724)
Bin #20: (.0661951236245106,.0667317089874567] (n = 0) (mean = .)
Bin #21: (.0667317089874567,.0672682943504028] (n = 538) (mean = .1468401486988848)
Bin #22: (.0672682943504028,.0678048797133489] (n = 0) (mean = .)
Bin #23: (.0678048797133489,.068341465076295] (n = 586) (mean = .1040955631399317)
Bin #24: (.068341465076295,.0688780504392411] (n = 0) (mean = .)
Bin #25: (.0688780504392411,.0694146358021872] (n = 638) (mean = .1253918495297806)
Bin #26: (.0694146358021872,.0699512211651333] (n = 0) (mean = .)
Bin #27: (.0699512211651333,.0704878065280794] (n = 638) (mean = .109717868338558)
Bin #28: (.0704878065280794,.0710243918910255] (n = 689) (mean = .1132075471698113)
Bin #29: (.0710243918910255,.0715609772539716] (n = 0) (mean = .)
Bin #30: (.0715609772539716,.0720975626169177] (n = 732) (mean = .116120218579235)
Bin #31: (.0720975626169177,.0726341479798638] (n = 0) (mean = .)
Bin #32: (.0726341479798638,.0731707333428099] (n = 782) (mean = .1240409207161125)
Bin #33: (.0731707333428099,.073707318705756] (n = 0) (mean = .)
Bin #34: (.073707318705756,.0742439040687021] (n = 752) (mean = .1077127659574468)
Bin #35: (.0742439040687021,.0747804894316482] (n = 0) (mean = .)
Bin #36: (.0747804894316482,.0753170747945943] (n = 839) (mean = .1060786650774732)
Bin #37: (.0753170747945943,.0758536601575404] (n = 0) (mean = .)
Bin #38: (.0758536601575404,.0763902455204865] (n = 822) (mean = .1240875912408759)
Bin #39: (.0763902455204865,.0769268308834326] (n = 0) (mean = .)
Bin #40: (.0769268308834326,.0774634162463787] (n = 855) (mean = .1169590643274854)
Bin #41: (.0774634162463787,.0780000016093254] (n = 0) (mean = .)
Bin #1: [.08,.0805555554827054] (n = 0) (mean = .)
Bin #2: (.0805555554827054,.0811111109654108] (n = 979) (mean = .0990806945863126)
Bin #3: (.0811111109654108,.0816666664481162] (n = 0) (mean = .)
Bin #4: (.0816666664481162,.0822222219308216] (n = 1099) (mean = .097361237488626)
Bin #5: (.0822222219308216,.082777777413527] (n = 0) (mean = .)
Bin #6: (.082777777413527,.0833333328962324] (n = 1110) (mean = .0945945945945946)
Bin #7: (.0833333328962324,.0838888883789378] (n = 0) (mean = .)
Bin #8: (.0838888883789378,.0844444438616432] (n = 1024) (mean = .1005859375)
Bin #9: (.0844444438616432,.0849999993443486] (n = 0) (mean = .)
Bin #10: (.0849999993443486,.085555554827054] (n = 1053) (mean = .1016144349477683)
Bin #11: (.085555554827054,.0861111103097594] (n = 1084) (mean = .0839483394833948)
Bin #12: (.0861111103097594,.0866666657924648] (n = 0) (mean = .)
Bin #13: (.0866666657924648,.0872222212751702] (n = 1167) (mean = .1036846615252785)
Bin #14: (.0872222212751702,.0877777767578756] (n = 0) (mean = .)
Bin #15: (.0877777767578756,.088333332240581] (n = 1216) (mean = .0912828947368421)
Bin #16: (.088333332240581,.0888888877232864] (n = 0) (mean = .)
Bin #17: (.0888888877232864,.0894444432059918] (n = 1270) (mean = .1)
Bin #18: (.0894444432059918,.0899999986886972] (n = 0) (mean = .)
Bin #19: (.0899999986886972,.0905555541714026] (n = 1257) (mean = .0986475735879077)
Bin #20: (.0905555541714026,.091111109654108] (n = 1206) (mean = .0945273631840796)
Bin #21: (.091111109654108,.0916666651368134] (n = 0) (mean = .)
Bin #22: (.0916666651368134,.0922222206195188] (n = 1265) (mean = .0996047430830039)
Bin #23: (.0922222206195188,.0927777761022242] (n = 0) (mean = .)
Bin #24: (.0927777761022242,.0933333315849296] (n = 1325) (mean = .100377358490566)
Bin #25: (.0933333315849296,.093888887067635] (n = 0) (mean = .)
Bin #26: (.093888887067635,.0944444425503404] (n = 1297) (mean = .1079414032382421)
Bin #27: (.0944444425503404,.0949999980330458] (n = 0) (mean = .)
Bin #28: (.0949999980330458,.0955555535157512] (n = 1324) (mean = .1004531722054381)
Bin #29: (.0955555535157512,.0961111089984566] (n = 1327) (mean = .0972117558402412)
Bin #30: (.0961111089984566,.096666664481162] (n = 0) (mean = .)
Bin #31: (.096666664481162,.0972222199638674] (n = 1325) (mean = .0867924528301887)
Bin #32: (.0972222199638674,.0977777754465728] (n = 0) (mean = .)
Bin #33: (.0977777754465728,.0983333309292782] (n = 1400) (mean = .1057142857142857)
Bin #34: (.0983333309292782,.0988888864119836] (n = 0) (mean = .)
Bin #35: (.0988888864119836,.099444441894689] (n = 1439) (mean = .1021542738012509)
Bin #36: (.099444441894689,.0999999973773944] (n = 0) (mean = .)
Bin #37: (.0999999973773944,.1005555528600998] (n = 1388) (mean = .0965417867435159)
Bin #38: (.1005555528600998,.1011111083428052] (n = 1466) (mean = .1084583901773533)
Bin #39: (.1011111083428052,.1016666638255106] (n = 0) (mean = .)
Bin #40: (.1016666638255106,.102222219308216] (n = 1446) (mean = .1037344398340249)
Bin #41: (.102222219308216,.1027777747909214] (n = 0) (mean = .)
Bin #42: (.1027777747909214,.1033333302736268] (n = 1479) (mean = .1041244083840433)
Bin #43: (.1033333302736268,.1038888857563322] (n = 0) (mean = .)
Bin #44: (.1038888857563322,.1044444412390376] (n = 1520) (mean = .1006578947368421)
Bin #45: (.1044444412390376,.1049999967217445] (n = 0) (mean = .)

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. rdrobust recidivism bac1, kernel(rectangular) masspoints(off) p(2) c(0.08)
kernel() incorrectly specified
r(7);

end of do-file

r(7);

. help rdrobut

. help rdrobust

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. rdrobust recidivism bac1, kernel(uniform) masspoints(off) p(2) c(0.08)

Sharp RD estimates using local polynomial regression.

    Cutoff c = .08 | Left of c  Right of c            Number of obs =     214558
-------------------+----------------------            BW type       =      mserd
     Number of obs |     23010      191548            Kernel        =    Uniform
Eff. Number of obs |     15977       36424            VCE method    =         NN
    Order est. (p) |         2           2
    Order bias (q) |         3           3
       BW est. (h) |     0.028       0.028
       BW bias (b) |     0.043       0.043
         rho (h/b) |     0.656       0.656

Outcome: recidivism. Running variable: bac1.
--------------------------------------------------------------------------------
            Method |   Coef.    Std. Err.    z     P>|z|    [95% Conf. Interval]
-------------------+------------------------------------------------------------
      Conventional | -.01828     .00799   -2.2887  0.022   -.033943     -.002626
            Robust |     -          -     -2.0595  0.039   -.035947      -.00089
--------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. rdrobust recidivism bac1, kernel(epanechnikov) masspoints(off) p(2) c(0.08)

Sharp RD estimates using local polynomial regression.

    Cutoff c = .08 | Left of c  Right of c            Number of obs =     214558
-------------------+----------------------            BW type       =      mserd
     Number of obs |     23010      191548            Kernel        = Epanechnikov
Eff. Number of obs |     15977       36424            VCE method    =         NN
    Order est. (p) |         2           2
    Order bias (q) |         3           3
       BW est. (h) |     0.029       0.029
       BW bias (b) |     0.042       0.042
         rho (h/b) |     0.691       0.691

Outcome: recidivism. Running variable: bac1.
--------------------------------------------------------------------------------
            Method |   Coef.    Std. Err.    z     P>|z|    [95% Conf. Interval]
-------------------+------------------------------------------------------------
      Conventional | -.01733     .00827   -2.0960  0.036   -.033537     -.001125
            Robust |     -          -     -1.9178  0.055   -.036025      .000392
--------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. rdrobust recidivism bac1 if donut==0, kernel(epanechnikov) masspoints(off) p(2) c(0.08)

Sharp RD estimates using local polynomial regression.

    Cutoff c = .08 | Left of c  Right of c            Number of obs =     212676
-------------------+----------------------            BW type       =      mserd
     Number of obs |     21128      191548            Kernel        = Epanechnikov
Eff. Number of obs |     12560       27467            VCE method    =         NN
    Order est. (p) |         2           2
    Order bias (q) |         3           3
       BW est. (h) |     0.023       0.023
       BW bias (b) |     0.039       0.039
         rho (h/b) |     0.580       0.580

Outcome: recidivism. Running variable: bac1.
--------------------------------------------------------------------------------
            Method |   Coef.    Std. Err.    z     P>|z|    [95% Conf. Interval]
-------------------+------------------------------------------------------------
      Conventional |  -.0206     .01275   -1.6159  0.106   -.045594      .004386
            Robust |     -          -     -1.4368  0.151   -.048947      .007538
--------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. rdrobust recidivism bac1 if donut==0, kernel(uniform) masspoints(off) p(2) c(0.08)

Sharp RD estimates using local polynomial regression.

    Cutoff c = .08 | Left of c  Right of c            Number of obs =     212676
-------------------+----------------------            BW type       =      mserd
     Number of obs |     21128      191548            Kernel        =    Uniform
Eff. Number of obs |     13136       30466            VCE method    =         NN
    Order est. (p) |         2           2
    Order bias (q) |         3           3
       BW est. (h) |     0.024       0.024
       BW bias (b) |     0.050       0.050
         rho (h/b) |     0.489       0.489

Outcome: recidivism. Running variable: bac1.
--------------------------------------------------------------------------------
            Method |   Coef.    Std. Err.    z     P>|z|    [95% Conf. Interval]
-------------------+------------------------------------------------------------
      Conventional | -.01648     .01132   -1.4561  0.145   -.038658      .005702
            Robust |     -          -     -1.5273  0.127   -.042362      .005255
--------------------------------------------------------------------------------

. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. rdplot recidivism bac1, p(1) masspoints(off) c(0.08) graph_options(title(RD Plot Recidivism and BAC))

RD Plot with evenly spaced mimicking variance number of bins using spacings estimators.

       Cutoff c = .08 | Left of c  Right of c        Number of obs  =     214558
----------------------+----------------------        Kernel         =    Uniform
        Number of obs |     23010      191548
   Eff. Number of obs |     23010      191548
  Order poly. fit (p) |         1           1
     BW poly. fit (h) |     0.080       0.369
 Number of bins scale |     1.000       1.000

Outcome: recidivism. Running variable: bac1.
---------------------------------------------
                      | Left of c  Right of c
----------------------+----------------------
        Bins selected |      1119        1300
   Average bin length |     0.000       0.000
    Median bin length |     0.000       0.000
----------------------+----------------------
    IMSE-optimal bins |         4          17
  Mimicking Var. bins |      1119        1300
----------------------+----------------------
Rel. to IMSE-optimal: | 
        Implied scale |   279.750      76.471
    WIMSE var. weight |     0.000       0.000
    WIMSE bias weight |     1.000       1.000
---------------------------------------------


. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. rdplot recidivism bac1 if bac1>=0.03 & bac1<=0.13, p(1) masspoints(off) c(0.08) graph_options(title(RD Plot Recidivism and BAC))

RD Plot with evenly spaced mimicking variance number of bins using spacings estimators.

       Cutoff c = .08 | Left of c  Right of c        Number of obs  =      89967
----------------------+----------------------        Kernel         =    Uniform
        Number of obs |     18892       71075
   Eff. Number of obs |     18892       71075
  Order poly. fit (p) |         1           1
     BW poly. fit (h) |     0.049       0.050
 Number of bins scale |     1.000       1.000

Outcome: recidivism. Running variable: bac1.
---------------------------------------------
                      | Left of c  Right of c
----------------------+----------------------
        Bins selected |       584         646
   Average bin length |     0.000       0.000
    Median bin length |     0.000       0.000
----------------------+----------------------
    IMSE-optimal bins |         6           4
  Mimicking Var. bins |       584         646
----------------------+----------------------
Rel. to IMSE-optimal: | 
        Implied scale |    97.333     161.500
    WIMSE var. weight |     0.000       0.000
    WIMSE bias weight |     1.000       1.000
---------------------------------------------


. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. rdplot recidivism bac1 if bac1>=0.03 & bac1<=0.13, p(2) masspoints(off) c(0.08) graph_options(title(RD Plot Recidivism and BAC))

RD Plot with evenly spaced mimicking variance number of bins using spacings estimators.

       Cutoff c = .08 | Left of c  Right of c        Number of obs  =      89967
----------------------+----------------------        Kernel         =    Uniform
        Number of obs |     18892       71075
   Eff. Number of obs |     18892       71075
  Order poly. fit (p) |         2           2
     BW poly. fit (h) |     0.049       0.050
 Number of bins scale |     1.000       1.000

Outcome: recidivism. Running variable: bac1.
---------------------------------------------
                      | Left of c  Right of c
----------------------+----------------------
        Bins selected |       584         646
   Average bin length |     0.000       0.000
    Median bin length |     0.000       0.000
----------------------+----------------------
    IMSE-optimal bins |         6           4
  Mimicking Var. bins |       584         646
----------------------+----------------------
Rel. to IMSE-optimal: | 
        Implied scale |    97.333     161.500
    WIMSE var. weight |     0.000       0.000
    WIMSE bias weight |     1.000       1.000
---------------------------------------------


. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. rdplot recidivism bac1 if bac1>=0.03 & bac1<=0.13, p(3) masspoints(off) c(0.08) graph_options(title(RD Plot Recidivism and BAC))

RD Plot with evenly spaced mimicking variance number of bins using spacings estimators.

       Cutoff c = .08 | Left of c  Right of c        Number of obs  =      89967
----------------------+----------------------        Kernel         =    Uniform
        Number of obs |     18892       71075
   Eff. Number of obs |     18892       71075
  Order poly. fit (p) |         3           3
     BW poly. fit (h) |     0.049       0.050
 Number of bins scale |     1.000       1.000

Outcome: recidivism. Running variable: bac1.
---------------------------------------------
                      | Left of c  Right of c
----------------------+----------------------
        Bins selected |       584         646
   Average bin length |     0.000       0.000
    Median bin length |     0.000       0.000
----------------------+----------------------
    IMSE-optimal bins |         6           4
  Mimicking Var. bins |       584         646
----------------------+----------------------
Rel. to IMSE-optimal: | 
        Implied scale |    97.333     161.500
    WIMSE var. weight |     0.000       0.000
    WIMSE bias weight |     1.000       1.000
---------------------------------------------


. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. rdplot recidivism bac1 if bac1>=0.03 & bac1<=0.13, p(4) masspoints(off) c(0.08) graph_options(title(RD Plot Recidivism and BAC))

RD Plot with evenly spaced mimicking variance number of bins using spacings estimators.

       Cutoff c = .08 | Left of c  Right of c        Number of obs  =      89967
----------------------+----------------------        Kernel         =    Uniform
        Number of obs |     18892       71075
   Eff. Number of obs |     18892       71075
  Order poly. fit (p) |         4           4
     BW poly. fit (h) |     0.049       0.050
 Number of bins scale |     1.000       1.000

Outcome: recidivism. Running variable: bac1.
---------------------------------------------
                      | Left of c  Right of c
----------------------+----------------------
        Bins selected |       584         646
   Average bin length |     0.000       0.000
    Median bin length |     0.000       0.000
----------------------+----------------------
    IMSE-optimal bins |         6           4
  Mimicking Var. bins |       584         646
----------------------+----------------------
Rel. to IMSE-optimal: | 
        Implied scale |    97.333     161.500
    WIMSE var. weight |     0.000       0.000
    WIMSE bias weight |     1.000       1.000
---------------------------------------------


. 
end of do-file

. do "/var/folders/9d/_2mr739j3sz0szn1f4fsypss5n8_l0/T//SD00947.000000"

. clear

. capture log close
